{"version":3,"file":"arrays.js","names":["createArray","arrayLength","startIndex","Array","fill","map","_","index","sumArray","array","isArray","length","reduce","previous","current","averageArray","uniqueArray","Set","from","uniqueArrayFallback","shuffleArray","a","Math","random","sort","b","chunkArray","size","head","slice","tail","omitFromArray","value","indexOf","difference","array1","array2","res","item","push"],"sources":["../src/arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from './internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\nexport function createArray(arrayLength: number, startIndex = 0): number[] {\n  return new Array(arrayLength).fill(null).map((_, index) => startIndex + index);\n}\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"],"mappings":"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"}