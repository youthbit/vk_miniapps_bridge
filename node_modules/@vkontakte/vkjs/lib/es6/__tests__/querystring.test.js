import { test } from '@jest/globals';
import { querystring } from '../querystring';
describe('querystring parse', function () {
  test('string starting with a `?`, `#` or `&`', function () {
    expect(querystring.parse('?foo=bar&xyz=baz')).toEqual({
      foo: 'bar',
      xyz: 'baz'
    });
    expect(querystring.parse('#foo=bar&xyz=baz')).toEqual({
      foo: 'bar',
      xyz: 'baz'
    });
    expect(querystring.parse('&foo=bar&xyz=baz')).toEqual({
      foo: 'bar',
      xyz: 'baz'
    });
  });

  // TODO: Написать больше тестов
});

describe('querystring stringify', function () {
  test('empty string for null, undefined or empty data', function () {
    expect(querystring.stringify(null)).toEqual('');
    expect(querystring.stringify(undefined)).toEqual('');
    expect(querystring.stringify({})).toEqual('');
  });
  test('base', function () {
    expect(querystring.stringify({
      foo: 'bar'
    })).toEqual('foo=bar');
    expect(querystring.stringify({
      foo: 'bar',
      baz: 2
    })).toEqual('foo=bar&baz=2');
  });
  test('encoding', function () {
    expect(querystring.stringify({
      foo: 'bar',
      baz: 'foo & bar'
    })).toEqual('foo=bar&baz=foo%20%26%20bar');
    expect(querystring.stringify({
      foo: 'bar',
      baz: 'foo & bar'
    }, {
      encode: true
    })).toEqual('foo=bar&baz=foo%20%26%20bar');
    expect(querystring.stringify({
      foo: 'bar',
      baz: 'foo & bar'
    }, {
      encode: false
    })).toEqual('foo=bar&baz=foo & bar');
  });
  test('arrays', function () {
    expect(querystring.stringify({
      foo: [1, 2, 3]
    })).toEqual('foo[]=1&foo[]=2&foo[]=3');
    expect(querystring.stringify({
      foo: ['a', 'foo & bar']
    })).toEqual('foo[]=a&foo[]=foo%20%26%20bar');
  });
  test('null and undefined', function () {
    expect(querystring.stringify({
      a: 'foo',
      b: undefined,
      c: null
    })).toEqual('a=foo&c=');
    expect(querystring.stringify({
      a: 'foo',
      b: undefined,
      c: null
    }, {
      skipNull: true
    })).toEqual('a=foo');
  });
});
//# sourceMappingURL=querystring.test.js.map