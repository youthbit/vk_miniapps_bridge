import { createElement } from 'react';
import { expect, test, describe } from '@jest/globals';
import { hasReactNode, isPrimitiveReactNode } from '../react_utils';
describe(hasReactNode, function () {
  describe('return false cases', function () {
    test('should be false for value is undefined', function () {
      expect(hasReactNode(undefined)).toBeFalsy();
    });
    test('should be false for value is null', function () {
      expect(hasReactNode(null)).toBeFalsy();
    });
    test('should be false for value is false', function () {
      expect(hasReactNode(false)).toBeFalsy();
    });
    test('should be false for value is empty string', function () {
      expect(hasReactNode('')).toBeFalsy();
    });
  });
  describe('return true cases', function () {
    test('should be true for value is zero', function () {
      expect(hasReactNode(0)).toBeTruthy();
    });
    test('should be true for value is not empty string', function () {
      expect(hasReactNode(' ')).toBeTruthy();
    });
    test('should be true for value is react element', function () {
      expect(hasReactNode(createElement('div'))).toBeTruthy();
    });
  });
});
describe(isPrimitiveReactNode, function () {
  describe('return false cases', function () {
    test('should be false for value is boolean', function () {
      expect(isPrimitiveReactNode(false)).toBeFalsy();
    });
    test('should be false for value is react element', function () {
      expect(isPrimitiveReactNode(createElement('div'))).toBeFalsy();
    });
  });
  describe('return true cases', function () {
    test('should be false for value is undefined', function () {
      expect(isPrimitiveReactNode('')).toBeTruthy();
    });
    test('should be false for value is null', function () {
      expect(isPrimitiveReactNode(0)).toBeTruthy();
    });
  });
});
//# sourceMappingURL=react_utils.test.js.map