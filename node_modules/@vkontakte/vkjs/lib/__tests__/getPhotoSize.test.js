"use strict";

var _globals = require("@jest/globals");
var _getPhotoSize = require("../getPhotoSize");
(0, _globals.describe)('getPhotoSize', function () {
  (0, _globals.it)('recognizes an invalid or empty array', function () {
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(1, 1)).toBeNull();
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(null, 1)).toBeNull();
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)({}, 1)).toBeNull();
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)([], 1)).toBeNull();
  });
  (0, _globals.it)('handles src/url differences', function () {
    var url = 'https://vk.com';
    var sizes = [{
      width: 200,
      height: 200,
      src: url
    }, {
      width: 400,
      height: 400,
      url: url
    }, {
      width: 600,
      height: 600
    }];
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(sizes, 200)).toEqual({
      width: 200,
      height: 200,
      url: url
    });
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(sizes, 400)).toEqual({
      width: 400,
      height: 400,
      url: url
    });
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(sizes, 600)).toEqual({
      width: 600,
      height: 600,
      url: ''
    });
  });
  (0, _globals.it)('returns the minimum achievable image width', function () {
    var photoSizes = [{
      width: 550,
      height: 550
    }, {
      width: 750,
      height: 750
    }, {
      width: 50,
      height: 50
    }];
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(photoSizes, 500)).toEqual({
      width: 550,
      height: 550,
      url: ''
    });
  });
  (0, _globals.it)('returns the maximum achievable image width', function () {
    var photoSizes = [{
      width: 450,
      height: 550
    }, {
      width: 350,
      height: 750
    }, {
      width: 50,
      height: 50
    }, {
      width: 240,
      height: 360
    }];
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(photoSizes, 500)).toEqual({
      width: 450,
      height: 550,
      url: ''
    });
  });
  (0, _globals.it)('returns the minimum achievable image by width and height', function () {
    var photoSizes = [{
      width: 550,
      height: 550
    }, {
      width: 750,
      height: 750
    }, {
      width: 50,
      height: 50
    }];
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(photoSizes, 500, 600)).toEqual({
      width: 750,
      height: 750,
      url: ''
    });
  });
  (0, _globals.it)('returns the maximum achievable image by width and height', function () {
    var photoSizes = [{
      width: 350,
      height: 250
    }, {
      width: 450,
      height: 550
    }, {
      width: 50,
      height: 50
    }];
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(photoSizes, 500, 600)).toEqual({
      width: 450,
      height: 550,
      url: ''
    });
  });
  (0, _globals.it)('returns the maximum achievable image in height among the same width', function () {
    var photoSizes = [{
      width: 350,
      height: 250
    }, {
      width: 350,
      height: 550
    }, {
      width: 350,
      height: 300
    }];
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(photoSizes, 500, 600)).toEqual({
      width: 350,
      height: 550,
      url: ''
    });
  });
  (0, _globals.it)('returns the maximum size (Infinity hack)', function () {
    var photoSizes = [{
      width: 550,
      height: 550
    }, {
      width: 750,
      height: 750
    }];
    (0, _globals.expect)((0, _getPhotoSize.getPhotoSize)(photoSizes, Infinity)).toEqual({
      width: 750,
      height: 750,
      url: ''
    });
  });
});
//# sourceMappingURL=getPhotoSize.test.js.map