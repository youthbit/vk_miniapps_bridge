"use strict";

var _globals = require("@jest/globals");
var _functions = require("../functions");
var Mock = _globals.jest.Mock;
(0, _globals.describe)('throttle', function () {
  var threshold = 50;
  var fn;
  var fnThrottled;
  (0, _globals.beforeEach)(function () {
    _globals.jest.useFakeTimers();
    _globals.jest.setSystemTime(100);
    fn = _globals.jest.fn();
    fnThrottled = (0, _functions.throttle)(fn, threshold);
  });
  (0, _globals.test)('should call functions as usual if they exceed threshold interval', function () {
    fnThrottled(1);
    (0, _globals.expect)(fn.mock.calls).toEqual([[1]]);
    _globals.jest.advanceTimersByTime(threshold);
    fnThrottled(2);
    (0, _globals.expect)(fn.mock.calls).toEqual([[1], [2]]);
  });
  (0, _globals.test)('should trigger last call at the end of threshold', function () {
    fnThrottled(1);
    (0, _globals.expect)(fn.mock.calls).toEqual([[1]]);
    _globals.jest.advanceTimersByTime(10);
    fnThrottled(2);
    _globals.jest.advanceTimersByTime(threshold - 10);
    (0, _globals.expect)(fn.mock.calls).toEqual([[1], [2]]);
  });
  (0, _globals.test)('should call not more than once per threshold and preserve correct call order', function () {
    fnThrottled(1);
    // call function immediately after the first call
    (0, _globals.expect)(fn.mock.calls).toEqual([[1]]);
    fnThrottled(2);
    fnThrottled(3);
    _globals.jest.advanceTimersByTime(threshold - 10); // 40ms
    // throttle following calls until the threshold is reached
    (0, _globals.expect)(fn.mock.calls).toEqual([[1]]);
    fnThrottled(4);
    _globals.jest.advanceTimersByTime(10); // 50ms
    // call function with last arguments after the threshold is reached
    (0, _globals.expect)(fn.mock.calls).toEqual([[1], [4]]);
    _globals.jest.advanceTimersByTime(10); // 60ms
    fnThrottled(5);
    // don't call function immediately and wait until threshold reached
    (0, _globals.expect)(fn.mock.calls).toEqual([[1], [4]]);
    _globals.jest.advanceTimersByTime(threshold - 10); // 100ms
    (0, _globals.expect)(fn.mock.calls).toEqual([[1], [4], [5]]);
  });
  (0, _globals.it)('should cancel throttled call', function () {
    fnThrottled(1);
    fnThrottled(2);
    fnThrottled(3);
    fnThrottled.cancel();
    _globals.jest.advanceTimersByTime(threshold);
    (0, _globals.expect)(fn).toHaveBeenCalledTimes(1);
    (0, _globals.expect)(fn).toHaveBeenCalledWith(1);
  });
});
(0, _globals.describe)('debounce', function () {
  var delay = 50;
  var fn;
  var fnDebounced;
  (0, _globals.beforeEach)(function () {
    _globals.jest.useFakeTimers();
    _globals.jest.setSystemTime(100);
    fn = _globals.jest.fn();
    fnDebounced = (0, _functions.debounce)(fn, delay);
  });
  (0, _globals.test)('should debounce function call', function () {
    fnDebounced(1);
    (0, _globals.expect)(fn.mock.calls).toEqual([]);
    _globals.jest.advanceTimersByTime(10); // 10ms
    fnDebounced(2);
    _globals.jest.advanceTimersByTime(delay - 10); // 50ms
    (0, _globals.expect)(fn.mock.calls).toEqual([]);
    _globals.jest.advanceTimersByTime(10); // 60ms
    (0, _globals.expect)(fn.mock.calls).toEqual([[2]]);
  });
  (0, _globals.it)('should cancel debounced call', function () {
    fnDebounced(1);
    fnDebounced(2);
    fnDebounced(3);
    fnDebounced.cancel();
    _globals.jest.advanceTimersByTime(delay);
    (0, _globals.expect)(fn).not.toHaveBeenCalled();
  });
});
(0, _globals.describe)('once', function () {
  (0, _globals.test)('should be called once', function () {
    var fn = _globals.jest.fn();
    var fnOnce = (0, _functions.once)(fn);
    fnOnce();
    fnOnce();
    fnOnce();
    (0, _globals.expect)(fn).toBeCalledTimes(1);
  });
});
//# sourceMappingURL=functions.test.js.map