"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.makeIcon = makeIcon;
var _react = _interopRequireDefault(require("react"));
var _browserSymbol = _interopRequireDefault(require("svg-baker-runtime/browser-symbol"));
var _iconSettings = require("./IconSettings");
var _sprite = require("./sprite");
var _warnOnce = require("./warnOnce");
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function iconClass(fragments, param) {
    var classPrefix = param.classPrefix, globalClasses = param.globalClasses;
    var res = "";
    for(var i = 0; i < fragments.length; i++){
        if (classPrefix) {
            res += " " + (classPrefix + fragments[i]);
        }
        if (!classPrefix || globalClasses) {
            res += " " + fragments[i];
        }
    }
    return res;
}
var SvgIcon = function(_param) {
    var width = _param.width, height = _param.height, viewBox = _param.viewBox, id = _param.id, _className = _param.className, className = _className === void 0 ? "" : _className, fill = _param.fill, getRootRef = _param.getRootRef, tmp = _param.style, propsStyle = tmp === void 0 ? {} : tmp, title = _param.title, restProps = _objectWithoutProperties(_param, [
        "width",
        "height",
        "viewBox",
        "id",
        "className",
        "fill",
        "getRootRef",
        "style",
        "title"
    ]);
    var size = Math.max(width, height);
    var iconSettings = _react.default.useContext(_iconSettings.IconSettingsContext);
    var ownClass = iconClass([
        "Icon",
        "Icon--".concat(size),
        "Icon--w-".concat(width),
        "Icon--h-".concat(height),
        "Icon--".concat(id)
    ], iconSettings);
    var style = _objectSpread({
        width: width,
        height: height
    }, propsStyle);
    return /*#__PURE__*/ _react.default.createElement("svg", _extends({
        "aria-hidden": "true",
        display: "block"
    }, restProps, {
        className: "".concat(ownClass, " ").concat(className),
        viewBox: viewBox,
        width: width,
        height: height,
        style: style,
        ref: getRootRef
    }), title && /*#__PURE__*/ _react.default.createElement("title", null, title), /*#__PURE__*/ _react.default.createElement("use", {
        xlinkHref: "#".concat(id),
        style: {
            fill: "currentColor",
            color: fill
        }
    }));
};
function makeIcon(componentName, id, viewBox, content, width, height, deprecated, replacement) {
    var isMounted = false;
    function mountIcon() {
        if (!isMounted) {
            (0, _sprite).addSpriteSymbol(new _browserSymbol.default({
                id: id,
                viewBox: viewBox,
                content: content
            }));
            isMounted = true;
        }
    }
    var warn = deprecated ? (0, _warnOnce).warnOnce(componentName) : null;
    var Icon = function(props) {
        (0, _sprite).useIsomorphicLayoutEffect(mountIcon, []);
        if (deprecated) {
            var replacementNotice = replacement ? ". \u0417\u0430\u043C\u0435\u043D\u0438\u0442\u0435 \u043D\u0430 ".concat(replacement) : "";
            warn("\u0418\u043A\u043E\u043D\u043A\u0430 \u0443\u0441\u0442\u0430\u0440\u0435\u043B\u0430" + replacementNotice);
        }
        return /*#__PURE__*/ _react.default.createElement(SvgIcon, _extends({}, props, {
            viewBox: viewBox,
            id: id,
            width: !isNaN(props.width) ? +props.width : width,
            height: !isNaN(props.height) ? +props.height : height
        }));
    };
    Icon.mountIcon = mountIcon;
    Icon.displayName = componentName;
    return Icon;
}
