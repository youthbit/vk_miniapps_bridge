import * as React from 'react';
import { TouchProps } from '../Touch/Touch';
import { AnchorHTMLAttributesOnly, HasComponent, HasRootRef } from '../../types';
import { FocusVisibleMode } from '../FocusVisible/FocusVisible';
declare type StateMode = 'opacity' | 'background';
export declare type TappableElementProps = Omit<React.AllHTMLAttributes<HTMLElement>, 'onTouchStart' | 'onTouchMove' | 'onTouchEnd' | 'onTouchCancel' | 'onMouseDown' | 'onMouseMove' | 'onMouseUp' | 'onMouseLeave'> & AnchorHTMLAttributesOnly;
export interface TappableProps extends TappableElementProps, HasRootRef<HTMLElement>, HasComponent, Pick<TouchProps, 'onStart' | 'onEnd' | 'onMove'> {
    /**
     * Длительность показа active-состояния
     */
    activeEffectDelay?: number;
    stopPropagation?: boolean;
    /**
     * Указывает, должен ли компонент реагировать на hover-состояние
     */
    hasHover?: boolean;
    /**
     * Указывает, должен ли компонент реагировать на active-состояние
     */
    hasActive?: boolean;
    /**
     * Стиль подсветки active-состояния. Если передать произвольную строку, она добавится как css-класс во время active
     */
    activeMode?: StateMode | string;
    /**
     * Стиль подсветки hover-состояния. Если передать произвольную строку, она добавится как css-класс во время hover
     */
    hoverMode?: StateMode | string;
    /**
     * Стиль аутлайна focus visible. Если передать произвольную строку, она добавится как css-класс во время focus-visible
     */
    focusVisibleMode?: FocusVisibleMode | string;
    children?: React.ReactNode;
    onEnter?(outputEvent: MouseEvent): void;
    onLeave?(outputEvent: MouseEvent): void;
}
export interface RootComponentProps extends TouchProps {
    ref?: React.Ref<HTMLElement>;
}
export declare const ACTIVE_DELAY = 70;
export declare const ACTIVE_EFFECT_DELAY = 600;
/**
 * @see https://vkcom.github.io/VKUI/#/Tappable
 */
export declare const Tappable: ({ children, Component, onClick, onKeyDown: _onKeyDown, activeEffectDelay, stopPropagation, getRootRef, hasHover: _hasHover, hoverMode, hasActive: _hasActive, activeMode, focusVisibleMode, onEnter, onLeave, className, ...props }: TappableProps) => JSX.Element;
export {};
