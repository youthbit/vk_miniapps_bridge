{"version":3,"file":"useAdaptivityHasHover.js","names":["useAdaptivityHasHover","deferDetect","React","useContext","AdaptivityContext","hasHoverContext","hasHover","undefined","hasHoverLib","isClient","useIsClient"],"sources":["../../../src/hooks/useAdaptivityHasHover.ts"],"sourcesContent":["import * as React from 'react';\nimport { hasHover as hasHoverLib } from '@vkontakte/vkjs';\nimport { AdaptivityContext } from '../components/AdaptivityProvider/AdaptivityContext';\nimport { useIsClient } from './useIsClient';\n\n/**\n * Определение происходит с помощью `window.matchMedia`. Для того, чтобы не было ошибок при гидратации, по умолчанию\n * откладываем определение на второй рендер.\n *\n * [No SSR] Если передать `false`, то определение будет сразу.\n */\nexport function useAdaptivityHasHover(deferDetect?: true): undefined | boolean;\nexport function useAdaptivityHasHover(deferDetect?: false): boolean;\nexport function useAdaptivityHasHover(deferDetect = true): undefined | boolean {\n  const { hasHover: hasHoverContext } = React.useContext(AdaptivityContext);\n  const hasHover = hasHoverContext === undefined ? hasHoverLib : hasHoverContext;\n\n  const isClient = useIsClient(!deferDetect);\n  if (!isClient) {\n    return undefined;\n  }\n\n  return hasHover;\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAUO,SAASA,qBAAqB,GAA0C;EAAA,IAAzCC,WAAW,uEAAG,IAAI;EACtD,wBAAsCC,KAAK,CAACC,UAAU,CAACC,oCAAiB,CAAC;IAAvDC,eAAe,qBAAzBC,QAAQ;EAChB,IAAMA,QAAQ,GAAGD,eAAe,KAAKE,SAAS,GAAGC,cAAW,GAAGH,eAAe;EAE9E,IAAMI,QAAQ,GAAG,IAAAC,wBAAW,EAAC,CAACT,WAAW,CAAC;EAC1C,IAAI,CAACQ,QAAQ,EAAE;IACb,OAAOF,SAAS;EAClB;EAEA,OAAOD,QAAQ;AACjB"}