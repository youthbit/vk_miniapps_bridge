import * as React from 'react';
interface UseEnsuredControlProps<V, E extends React.ChangeEvent<any>> {
    value?: V;
    onChange?: (e: E) => any;
    defaultValue: V;
    disabled?: boolean | undefined;
}
export declare function useEnsuredControl<V, E extends React.ChangeEvent<any>>({ onChange: onChangeProp, disabled, ...props }: UseEnsuredControlProps<V, E>): [V | undefined, (e: E) => any];
interface UseCustomEnsuredControlProps<V> {
    value?: V;
    onChange?: (v: V) => any;
    defaultValue: V;
    disabled?: boolean | undefined;
}
export declare function useCustomEnsuredControl<V>({ disabled, onChange: onChangeProp, defaultValue, value, }: UseCustomEnsuredControlProps<V>): [V | undefined, (e: V) => any];
export {};
