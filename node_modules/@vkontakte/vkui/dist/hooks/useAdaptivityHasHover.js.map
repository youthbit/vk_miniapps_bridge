{"version":3,"file":"useAdaptivityHasHover.js","names":["React","hasHover","hasHoverLib","AdaptivityContext","useIsClient","useAdaptivityHasHover","deferDetect","useContext","hasHoverContext","undefined","isClient"],"sources":["../../src/hooks/useAdaptivityHasHover.ts"],"sourcesContent":["import * as React from 'react';\nimport { hasHover as hasHoverLib } from '@vkontakte/vkjs';\nimport { AdaptivityContext } from '../components/AdaptivityProvider/AdaptivityContext';\nimport { useIsClient } from './useIsClient';\n\n/**\n * Определение происходит с помощью `window.matchMedia`. Для того, чтобы не было ошибок при гидратации, по умолчанию\n * откладываем определение на второй рендер.\n *\n * [No SSR] Если передать `false`, то определение будет сразу.\n */\nexport function useAdaptivityHasHover(deferDetect?: true): undefined | boolean;\nexport function useAdaptivityHasHover(deferDetect?: false): boolean;\nexport function useAdaptivityHasHover(deferDetect = true): undefined | boolean {\n  const { hasHover: hasHoverContext } = React.useContext(AdaptivityContext);\n  const hasHover = hasHoverContext === undefined ? hasHoverLib : hasHoverContext;\n\n  const isClient = useIsClient(!deferDetect);\n  if (!isClient) {\n    return undefined;\n  }\n\n  return hasHover;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,IAAIC,WAAW,QAAQ,iBAAiB;AACzD,SAASC,iBAAiB,QAAQ,oDAAoD;AACtF,SAASC,WAAW,QAAQ,eAAe;;AAE3C;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASC,qBAAqB,GAA0C;EAAA,IAAzCC,WAAW,uEAAG,IAAI;EACtD,wBAAsCN,KAAK,CAACO,UAAU,CAACJ,iBAAiB,CAAC;IAAvDK,eAAe,qBAAzBP,QAAQ;EAChB,IAAMA,QAAQ,GAAGO,eAAe,KAAKC,SAAS,GAAGP,WAAW,GAAGM,eAAe;EAE9E,IAAME,QAAQ,GAAGN,WAAW,CAAC,CAACE,WAAW,CAAC;EAC1C,IAAI,CAACI,QAAQ,EAAE;IACb,OAAOD,SAAS;EAClB;EAEA,OAAOR,QAAQ;AACjB"}