import * as React from 'react';
import { NativeSelectProps } from '../NativeSelect/NativeSelect';
import { CustomSelectOptionProps } from '../CustomSelectOption/CustomSelectOption';
import { FormFieldProps } from '../FormField/FormField';
import { TrackerOptionsProps } from '../CustomScrollView/useTrackerVisibility';
import { SelectType } from '../Select/Select';
declare type SelectValue = React.SelectHTMLAttributes<HTMLSelectElement>['value'];
export interface CustomSelectOptionInterface {
    value: SelectValue;
    label: React.ReactElement | string;
    disabled?: boolean;
    [index: string]: any;
}
export interface SelectProps extends NativeSelectProps, FormFieldProps, TrackerOptionsProps {
    /**
     * Если `true`, то при клике на селект в нём появится текстовое поле для поиска по `options`. По умолчанию поиск
     * производится по `option.label`.
     */
    searchable?: boolean;
    /**
     * Текст, который будет отображен, если приходит пустой `options`.
     */
    emptyText?: string;
    /**
     * > ⚠️ В v6 из возвращаемых типов будет удалён `CustomSelectOptionInterface[]`. Для кастомной фильтрации используйте
     * > `filterFn`.
     */
    onInputChange?: (e: React.ChangeEvent, options: CustomSelectOptionInterface[]) => void | CustomSelectOptionInterface[];
    options: CustomSelectOptionInterface[];
    /**
     * Функция для кастомной фильтрации. По умолчанию поиск производится по `option.label`.
     */
    filterFn?: false | ((value: string, option: CustomSelectOptionInterface, getOptionLabel?: (option: Partial<CustomSelectOptionInterface>) => string) => boolean);
    popupDirection?: 'top' | 'bottom';
    /**
     * Рендер-проп для кастомного рендера опции.
     * В объекте аргумента приходят [свойства опции](https://vkcom.github.io/VKUI/#/CustomSelectOption?id=props)
     */
    renderOption?: (props: CustomSelectOptionProps) => React.ReactNode;
    /**
     * Рендер-проп для кастомного рендера содержимого дропдауна.
     * В `defaultDropdownContent` содержится список опций в виде скроллящегося блока.
     */
    renderDropdown?: ({ defaultDropdownContent, }: {
        defaultDropdownContent: React.ReactNode;
    }) => React.ReactNode;
    /**
     * Если `true`, то в дропдауне вместо списка опций рисуется спиннер. При переданных `renderDropdown` и `fetching: true`
     * "победит" `renderDropdown`.
     */
    fetching?: boolean;
    onClose?: VoidFunction;
    onOpen?: VoidFunction;
    icon?: React.ReactNode;
    dropdownOffsetDistance?: number;
    fixDropdownWidth?: boolean;
    forceDropdownPortal?: boolean;
    selectType?: SelectType;
}
/**
 * @see https://vkcom.github.io/VKUI/#/CustomSelect
 */
export declare function CustomSelect(props: SelectProps): JSX.Element;
export {};
