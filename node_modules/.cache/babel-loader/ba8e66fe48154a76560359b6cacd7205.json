{"ast":null,"code":"export var clamp = function clamp(value, min, max) {\n  return Math.max(min, Math.min(value, max));\n};\nexport function precisionRound(number) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var factor = Math.pow(10, precision);\n  return Math.round(number * factor) / factor;\n}\n\nfunction precision(number) {\n  return (\"\".concat(number).split('.')[1] || '').length;\n}\n\nfunction decimatedClamp(val, min, max, step) {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n\n  var prec = precision(step); // Round value to nearest min + k1 * step\n\n  var decimatedOffset = precisionRound(Math.round((val - min) / step) * step, prec); // Round range length _down_ to nearest min + k2 * step\n\n  var decimatedRange = precisionRound(Math.floor((max - min) / step) * step, prec);\n  return min + clamp(decimatedOffset, 0, decimatedRange);\n}\n\nexport function rescale(value, from, to) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var scaled = (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0];\n  return decimatedClamp(scaled, to[0], to[1], options.step);\n}","map":{"version":3,"mappings":"AAAA,OAAO,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAgBC,GAAhB,EAA6BC,GAA7B,EAAwC;EAAA,OAC3DC,IAAI,CAACD,GAALC,CAASF,GAATE,EAAcA,IAAI,CAACF,GAALE,CAASH,KAATG,EAAgBD,GAAhBC,CAAdA,CAD2D;AACxB,CAD9B;AAGP,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAuD;EAAA,IAAfC,SAAS,uEAAG,CAAG;EAC5D,IAAIC,MAAM,GAAGJ,IAAI,CAACK,GAALL,CAAS,EAATA,EAAaG,SAAbH,CAAb;EACA,OAAOA,IAAI,CAACM,KAALN,CAAWE,MAAM,GAAGE,MAApBJ,IAA8BI,MAArC;AACF;;AAEA,SAASD,SAAT,CAAmBD,MAAnB,EAAmC;EACjC,OAAO,CAAC,UAAGA,MAAH,EAAYK,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,KAA6B,EAA9B,EAAkCC,MAAzC;AACF;;AAEA,SAASC,cAAT,CAAwBC,GAAxB,EAAqCZ,GAArC,EAAkDC,GAAlD,EAA+DY,IAA/D,EAA8E;EAC5E,IAAIA,IAAI,IAAI,IAARA,IAAgBA,IAAI,IAAI,CAA5B,EAA+B;IAC7B,OAAOf,KAAK,CAACc,GAAD,EAAMZ,GAAN,EAAWC,GAAX,CAAZ;EACF;;EACA,IAAMa,IAAI,GAAGT,SAAS,CAACQ,IAAD,CAAtB,CAJ4E,CAK5E;;EACA,IAAME,eAAe,GAAGZ,cAAc,CAACD,IAAI,CAACM,KAALN,CAAW,CAACU,GAAG,GAAGZ,GAAP,IAAca,IAAzBX,IAAiCW,IAAlC,EAAwCC,IAAxC,CAAtC,CAN4E,CAO5E;;EACA,IAAME,cAAc,GAAGb,cAAc,CAACD,IAAI,CAACe,KAALf,CAAW,CAACD,GAAG,GAAGD,GAAP,IAAca,IAAzBX,IAAiCW,IAAlC,EAAwCC,IAAxC,CAArC;EACA,OAAOd,GAAG,GAAGF,KAAK,CAACiB,eAAD,EAAkB,CAAlB,EAAqBC,cAArB,CAAlB;AACF;;AAEA,OAAO,SAASE,OAAT,CACLnB,KADK,EAELoB,IAFK,EAGLC,EAHK,EAKL;EAAA,IADAC,OAA0B,uEAAG,EAC7B;EACA,IAAMC,MAAM,GAAI,CAACvB,KAAK,GAAGoB,IAAI,CAAC,CAAD,CAAb,KAAqBA,IAAI,CAAC,CAAD,CAAJA,GAAUA,IAAI,CAAC,CAAD,CAAnC,KAA4CC,EAAE,CAAC,CAAD,CAAFA,GAAQA,EAAE,CAAC,CAAD,CAAtD,IAA6DA,EAAE,CAAC,CAAD,CAA/E;EACA,OAAOT,cAAc,CAACW,MAAD,EAASF,EAAE,CAAC,CAAD,CAAX,EAAgBA,EAAE,CAAC,CAAD,CAAlB,EAAuBC,OAAO,CAACR,IAA/B,CAArB;AACF","names":["clamp","value","min","max","Math","precisionRound","number","precision","factor","pow","round","split","length","decimatedClamp","val","step","prec","decimatedOffset","decimatedRange","floor","rescale","from","to","options","scaled"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/helpers/math.ts"],"sourcesContent":["export const clamp = (value: number, min: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n\nexport function precisionRound(number: number, precision = 1) {\n  let factor = Math.pow(10, precision);\n  return Math.round(number * factor) / factor;\n}\n\nfunction precision(number: number) {\n  return (`${number}`.split('.')[1] || '').length;\n}\n\nfunction decimatedClamp(val: number, min: number, max: number, step?: number) {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n  const prec = precision(step);\n  // Round value to nearest min + k1 * step\n  const decimatedOffset = precisionRound(Math.round((val - min) / step) * step, prec);\n  // Round range length _down_ to nearest min + k2 * step\n  const decimatedRange = precisionRound(Math.floor((max - min) / step) * step, prec);\n  return min + clamp(decimatedOffset, 0, decimatedRange);\n}\n\nexport function rescale(\n  value: number,\n  from: [number, number],\n  to: [number, number],\n  options: { step?: number } = {},\n) {\n  const scaled = ((value - from[0]) / (from[1] - from[0])) * (to[1] - to[0]) + to[0];\n  return decimatedClamp(scaled, to[0], to[1], options.step);\n}\n"]},"metadata":{},"sourceType":"module"}