{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"before\", \"after\", \"children\", \"mode\", \"textWrap\", \"expandable\", \"className\"];\nimport * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { Paragraph } from '../Typography/Paragraph/Paragraph';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Icon16Chevron } from '@vkontakte/icons';\n/**\n * @see https://vkcom.github.io/VKUI/#/MiniInfoCell\n */\n\nexport var MiniInfoCell = function MiniInfoCell(_ref) {\n  var before = _ref.before,\n      after = _ref.after,\n      children = _ref.children,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'base' : _ref$mode,\n      _ref$textWrap = _ref.textWrap,\n      textWrap = _ref$textWrap === void 0 ? 'nowrap' : _ref$textWrap,\n      _ref$expandable = _ref.expandable,\n      expandable = _ref$expandable === void 0 ? false : _ref$expandable,\n      className = _ref.className,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var cellClasses = classNames(\"vkuiMiniInfoCell\", styles[\"MiniInfoCell--textWrap-\".concat(textWrap)], mode !== 'base' && styles[\"MiniInfoCell--mode-\".concat(mode)], className);\n  var cellContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiMiniInfoCell__before\"\n  }, before), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiMiniInfoCell__middle\"\n  }, /*#__PURE__*/React.createElement(Paragraph, {\n    className: \"vkuiMiniInfoCell__content\",\n    weight: mode === 'more' ? '2' : undefined\n  }, children), expandable && /*#__PURE__*/React.createElement(Icon16Chevron, null)), hasReactNode(after) && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiMiniInfoCell__after\"\n  }, after));\n  return restProps.onClick ? /*#__PURE__*/React.createElement(Tappable, _extends({\n    Component: \"div\",\n    role: \"button\"\n  }, restProps, {\n    className: cellClasses\n  }), cellContent) : /*#__PURE__*/React.createElement(\"div\", _extends({}, restProps, {\n    className: cellClasses\n  }), cellContent);\n};\nvar styles = {\n  \"MiniInfoCell--textWrap-short\": \"vkuiMiniInfoCell--textWrap-short\",\n  \"MiniInfoCell--textWrap-full\": \"vkuiMiniInfoCell--textWrap-full\",\n  \"MiniInfoCell--textWrap-nowrap\": \"vkuiMiniInfoCell--textWrap-nowrap\",\n  \"MiniInfoCell--mode-accent\": \"vkuiMiniInfoCell--mode-accent\",\n  \"MiniInfoCell--mode-add\": \"vkuiMiniInfoCell--mode-add\",\n  \"MiniInfoCell--mode-more\": \"vkuiMiniInfoCell--mode-more\"\n};","map":{"version":3,"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,iBAAzC;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAyCA;AACA;AACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAHC,IAAG,EASH;EAAA,IARvBC,MAAM,QAANA,MAQuB;EAAA,IAPvBC,KAAK,QAALA,KAOuB;EAAA,IANvBC,QAAQ,QAARA,QAMuB;EAAA,IANfC,iBACRC,IAKuB;EAAA,IALvBA,IAAI,0BAAG,MAAH,GAASD,SAKU;EAAA,IALVE,qBACbC,QAIuB;EAAA,IAJvBA,QAAQ,8BAAG,QAAH,GAAWD,aAII;EAAA,IAJJE,uBACnBC,UAGuB;EAAA,IAHvBA,UAAU,gCAAG,KAAH,GAAQD,eAGK;EAAA,IAFvBE,SAAS,QAATA,SAEuB;EAAA,IADpBC,SAAS,4CACW;;EACvB,IAAMC,WAAW,GAAGlB,UAAU,qBAE5BmB,MAAM,kCAA2BN,QAA3B,EAFsB,EAG5BF,IAAI,KAAK,MAATA,IAAmBQ,MAAM,8BAAuBR,IAAvB,EAHG,EAI5BK,SAJ4B,CAA9B;EAOA,IAAMI,WAAW,gBACfrB,oBAACA,KAAK,CAACsB,QAAP,EAAe,IAAf,EAAe,aACbtB;IAAMiB,SAAS;EAAf,GAAkDT,MAAlD,CADF,EACkE,aAChER;IAAKiB,SAAS;EAAd,GAA+C,aAC7CjB,oBAACG,SAAD,EAAU;IACRc,SAAS,6BADD;IAERM,MAAM,EAAEX,IAAI,KAAK,MAATA,GAAkB,GAAlBA,GAAwBY;EAFxB,CAAV,EAIGd,QAJH,CADF,EAOGM,UAAU,iBAAIhB,oBAACK,aAAD,EAAc,IAAd,CAPjB,CAFF,EAWGH,YAAY,CAACO,KAAD,CAAZP,IAAmB,aAAIF;IAAMiB,SAAS;EAAf,GAAiDR,KAAjD,CAX1B,CADF;EAgBA,OAAOS,SAAS,CAACO,OAAVP,GAAiB,aACtBlB,oBAACI,QAAD,EAASsB;IAACC,SAAS,EAAC,KAAX;IAAiBC,IAAI,EAAC;EAAtB,GAAmCV,SAAnC,EAA4C;IAAED,SAAS,EAAEE;EAAb,CAA5C,CAAT,EACGE,WADH,CADKH,GAGM,aAEXlB,wCAASkB,SAAT,EAAkB;IAAED,SAAS,EAAEE;EAAb,CAAlB,GACGE,WADH,CALF;AASD,CA1CM;AA0CL;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA","names":["React","classNames","hasReactNode","Paragraph","Tappable","Icon16Chevron","MiniInfoCell","_ref","before","after","children","_ref$mode","mode","_ref$textWrap","textWrap","_ref$expandable","expandable","className","restProps","cellClasses","styles","cellContent","Fragment","weight","undefined","onClick","_extends","Component","role"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/components/MiniInfoCell/MiniInfoCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { Paragraph } from '../Typography/Paragraph/Paragraph';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Icon16Chevron } from '@vkontakte/icons';\nimport styles from './MiniInfoCell.module.css';\n\nexport interface MiniInfoCellProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before: React.ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: React.ReactNode;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'accent' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью.\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/MiniInfoCell\n */\nexport const MiniInfoCell = ({\n  before,\n  after,\n  children,\n  mode = 'base',\n  textWrap = 'nowrap',\n  expandable = false,\n  className,\n  ...restProps\n}: MiniInfoCellProps) => {\n  const cellClasses = classNames(\n    styles['MiniInfoCell'],\n    styles[`MiniInfoCell--textWrap-${textWrap}`],\n    mode !== 'base' && styles[`MiniInfoCell--mode-${mode}`],\n    className,\n  );\n\n  const cellContent = (\n    <React.Fragment>\n      <span className={styles['MiniInfoCell__before']}>{before}</span>\n      <div className={styles['MiniInfoCell__middle']}>\n        <Paragraph\n          className={styles['MiniInfoCell__content']}\n          weight={mode === 'more' ? '2' : undefined}\n        >\n          {children}\n        </Paragraph>\n        {expandable && <Icon16Chevron />}\n      </div>\n      {hasReactNode(after) && <span className={styles['MiniInfoCell__after']}>{after}</span>}\n    </React.Fragment>\n  );\n\n  return restProps.onClick ? (\n    <Tappable Component=\"div\" role=\"button\" {...restProps} className={cellClasses}>\n      {cellContent}\n    </Tappable>\n  ) : (\n    <div {...restProps} className={cellClasses}>\n      {cellContent}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}