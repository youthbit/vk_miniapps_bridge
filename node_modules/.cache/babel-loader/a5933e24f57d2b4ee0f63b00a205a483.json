{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"badgeBeforeTitle\", \"badgeAfterTitle\", \"badgeBeforeSubtitle\", \"badgeAfterSubtitle\", \"before\", \"indicator\", \"children\", \"after\", \"expandable\", \"multiline\", \"subhead\", \"subtitle\", \"extraSubtitle\", \"className\"];\nimport * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { getPlatformClassName } from '../../helpers/getPlatformClassName';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Icon24Chevron } from '@vkontakte/icons';\nimport { Platform } from '../../lib/platform';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { Headline } from '../Typography/Headline/Headline';\nimport { Subhead } from '../Typography/Subhead/Subhead';\nimport { getSizeYClassName } from '../../helpers/getSizeYClassName';\n/**\n * @see https://vkcom.github.io/VKUI/#/SimpleCell\n */\n\nexport var SimpleCell = function SimpleCell(_ref) {\n  var badgeBeforeTitle = _ref.badgeBeforeTitle,\n      badgeAfterTitle = _ref.badgeAfterTitle,\n      badgeBeforeSubtitle = _ref.badgeBeforeSubtitle,\n      badgeAfterSubtitle = _ref.badgeAfterSubtitle,\n      before = _ref.before,\n      indicator = _ref.indicator,\n      children = _ref.children,\n      after = _ref.after,\n      expandable = _ref.expandable,\n      multiline = _ref.multiline,\n      subhead = _ref.subhead,\n      subtitle = _ref.subtitle,\n      extraSubtitle = _ref.extraSubtitle,\n      className = _ref.className,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var platform = usePlatform();\n  var hasAfter = hasReactNode(after) || expandable && platform === Platform.IOS;\n\n  var _useAdaptivity = useAdaptivity(),\n      sizeY = _useAdaptivity.sizeY;\n\n  return /*#__PURE__*/React.createElement(Tappable, _extends({}, restProps, {\n    className: classNames(\"vkuiSimpleCell\", getPlatformClassName(\"vkuiSimpleCell\", platform), getSizeYClassName(\"vkuiSimpleCell\", sizeY), expandable && \"vkuiSimpleCell--exp\", multiline && \"vkuiSimpleCell--mult\", className)\n  }), before, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSimpleCell__main\"\n  }, subhead && /*#__PURE__*/React.createElement(Subhead, {\n    Component: \"span\",\n    className: classNames(\"vkuiSimpleCell__text\", \"vkuiSimpleCell__subhead\")\n  }, subhead), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSimpleCell__content\"\n  }, badgeBeforeTitle && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSimpleCell__badge\"\n  }, badgeBeforeTitle), /*#__PURE__*/React.createElement(Headline, {\n    Component: \"span\",\n    className: \"vkuiSimpleCell__children\",\n    weight: \"3\"\n  }, children), hasReactNode(badgeAfterTitle) && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSimpleCell__badge\"\n  }, badgeAfterTitle)), subtitle && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSimpleCell__content\"\n  }, badgeBeforeSubtitle && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSimpleCell__badge\"\n  }, badgeBeforeSubtitle), /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(\"vkuiSimpleCell__typography\", \"vkuiSimpleCell__text\", \"vkuiSimpleCell__subtitle\")\n  }, subtitle), badgeAfterSubtitle && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiSimpleCell__badge\"\n  }, badgeAfterSubtitle)), extraSubtitle && /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(\"vkuiSimpleCell__typography\", \"vkuiSimpleCell__text\", \"vkuiSimpleCell__extraSubtitle\")\n  }, extraSubtitle)), hasReactNode(indicator) && /*#__PURE__*/React.createElement(Headline, {\n    Component: \"span\",\n    weight: \"3\",\n    className: \"vkuiSimpleCell__indicator\"\n  }, indicator), hasAfter && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiSimpleCell__after\"\n  }, after, expandable && platform === Platform.IOS && /*#__PURE__*/React.createElement(Icon24Chevron, null)));\n};","map":{"version":3,"mappings":"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","names":["React","classNames","hasReactNode","getPlatformClassName","Tappable","Icon24Chevron","Platform","usePlatform","useAdaptivity","Headline","Subhead","getSizeYClassName","SimpleCell","_ref","badgeBeforeTitle","badgeAfterTitle","badgeBeforeSubtitle","badgeAfterSubtitle","before","indicator","children","after","expandable","multiline","subhead","subtitle","extraSubtitle","className","restProps","platform","hasAfter","IOS","sizeY","_extends","Component","weight"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/components/SimpleCell/SimpleCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HasComponent } from '../../types';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { getPlatformClassName } from '../../helpers/getPlatformClassName';\nimport { TappableProps, Tappable } from '../Tappable/Tappable';\nimport { Icon24Chevron } from '@vkontakte/icons';\nimport { Platform } from '../../lib/platform';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { Headline } from '../Typography/Headline/Headline';\nimport { Subhead } from '../Typography/Subhead/Subhead';\nimport { getSizeYClassName } from '../../helpers/getSizeYClassName';\nimport styles from './SimpleCell.module.css';\n\nexport interface SimpleCellOwnProps extends HasComponent {\n  /**\n   * Иконка 28 или `<Avatar size={28|32|40|48|72} />`\n   */\n  before?: React.ReactNode;\n  /**\n   * Иконка 12 или `<Badge />`. Добавится слева от текста `children`.\n   */\n  badgeBeforeTitle?: React.ReactNode;\n  /**\n   * Иконка 12 или `<Badge />`. Добавится справа от текста `children`.\n   */\n  badgeAfterTitle?: React.ReactNode;\n  /**\n   * Иконка 12. Добавится слева от текста `subtitle`.\n   */\n  badgeBeforeSubtitle?: React.ReactNode;\n  /**\n   * Иконка 12. Добавится справа от текста `subtitle`.\n   */\n  badgeAfterSubtitle?: React.ReactNode;\n  /**\n   * Контейнер для текста справа от `children`.\n   */\n  indicator?: React.ReactNode;\n  /**\n   * Дополнительная строка текста над `children`.\n   */\n  subhead?: React.ReactNode;\n  /**\n   * Дополнительная строка текста под `children`.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Дополнительная строка текста под `children` и `subtitle`.\n   */\n  extraSubtitle?: React.ReactNode;\n  /**\n   * Иконка 24|28 или `<Switch />`. Располагается справа от `indicator`.\n   */\n  after?: React.ReactNode;\n  /**\n   * Убирает анимацию нажатия\n   */\n  disabled?: boolean;\n  /**\n   * В iOS добавляет chevron справа. Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean;\n  /**\n   * Включает многострочный режим для отображения текста\n   */\n  multiline?: boolean;\n}\n\nexport interface SimpleCellProps extends SimpleCellOwnProps, TappableProps {}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/SimpleCell\n */\nexport const SimpleCell = ({\n  badgeBeforeTitle,\n  badgeAfterTitle,\n  badgeBeforeSubtitle,\n  badgeAfterSubtitle,\n  before,\n  indicator,\n  children,\n  after,\n  expandable,\n  multiline,\n  subhead,\n  subtitle,\n  extraSubtitle,\n  className,\n  ...restProps\n}: SimpleCellProps) => {\n  const platform = usePlatform();\n  const hasAfter = hasReactNode(after) || (expandable && platform === Platform.IOS);\n  const { sizeY } = useAdaptivity();\n\n  return (\n    <Tappable\n      {...restProps}\n      className={classNames(\n        styles['SimpleCell'],\n        getPlatformClassName(styles['SimpleCell'], platform),\n        getSizeYClassName(styles['SimpleCell'], sizeY),\n        expandable && styles['SimpleCell--exp'],\n        multiline && styles['SimpleCell--mult'],\n        className,\n      )}\n    >\n      {before}\n      <div className={styles['SimpleCell__main']}>\n        {subhead && (\n          <Subhead\n            Component=\"span\"\n            className={classNames(styles['SimpleCell__text'], styles['SimpleCell__subhead'])}\n          >\n            {subhead}\n          </Subhead>\n        )}\n        <div className={styles['SimpleCell__content']}>\n          {badgeBeforeTitle && (\n            <span className={styles['SimpleCell__badge']}>{badgeBeforeTitle}</span>\n          )}\n          <Headline Component=\"span\" className={styles['SimpleCell__children']} weight=\"3\">\n            {children}\n          </Headline>\n          {hasReactNode(badgeAfterTitle) && (\n            <span className={styles['SimpleCell__badge']}>{badgeAfterTitle}</span>\n          )}\n        </div>\n        {subtitle && (\n          <div className={styles['SimpleCell__content']}>\n            {badgeBeforeSubtitle && (\n              <span className={styles['SimpleCell__badge']}>{badgeBeforeSubtitle}</span>\n            )}\n            <span\n              className={classNames(\n                styles['SimpleCell__typography'],\n                styles['SimpleCell__text'],\n                styles['SimpleCell__subtitle'],\n              )}\n            >\n              {subtitle}\n            </span>\n            {badgeAfterSubtitle && (\n              <span className={styles['SimpleCell__badge']}>{badgeAfterSubtitle}</span>\n            )}\n          </div>\n        )}\n        {extraSubtitle && (\n          <span\n            className={classNames(\n              styles['SimpleCell__typography'],\n              styles['SimpleCell__text'],\n              styles['SimpleCell__extraSubtitle'],\n            )}\n          >\n            {extraSubtitle}\n          </span>\n        )}\n      </div>\n      {hasReactNode(indicator) && (\n        <Headline Component=\"span\" weight=\"3\" className={styles['SimpleCell__indicator']}>\n          {indicator}\n        </Headline>\n      )}\n      {hasAfter && (\n        <div className={styles['SimpleCell__after']}>\n          {after}\n          {expandable && platform === Platform.IOS && <Icon24Chevron />}\n        </div>\n      )}\n    </Tappable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}