{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { uniqueArrayFallback } from './internal/uniqueArray';\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\n\nexport function createArray(arrayLength) {\n  var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return new Array(arrayLength).fill(null).map(function (_, index) {\n    return startIndex + index;\n  });\n}\n/**\n * Вычисляет сумму элементов массива\n */\n\nexport function sumArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n\n  return array.reduce(function (previous, current) {\n    return current + previous;\n  });\n}\n/**\n * Находит среднее арифметическое элементов массива\n */\n\nexport function averageArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n\n  return sumArray(array) / array.length;\n}\n/**\n * Возвращает новый массив с уникальными элементами\n */\n\nexport function uniqueArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n/**\n * Перемешивает исходный массив и возвращает новый\n */\n\nexport function shuffleArray(array) {\n  return array.map(function (a) {\n    return [Math.random(), a];\n  }).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (a) {\n    return a[1];\n  });\n}\n/**\n * Разбивает массив на чанки\n */\n\nexport function chunkArray(array, size) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  var head = array.slice(0, size);\n  var tail = array.slice(size);\n  return [head].concat(_toConsumableArray(chunkArray(tail, size)));\n}\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\n\nexport function omitFromArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = arguments.length > 1 ? arguments[1] : undefined;\n  var index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [].concat(_toConsumableArray(array.slice(0, index)), _toConsumableArray(array.slice(index + 1)));\n  }\n}\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\n\nexport function difference() {\n  var array1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var array2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return array1.reduce(function (res, item) {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n\n    return res;\n  }, []);\n}","map":{"version":3,"mappings":"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","names":["uniqueArrayFallback","createArray","arrayLength","startIndex","Array","fill","map","_","index","sumArray","array","isArray","length","reduce","previous","current","averageArray","uniqueArray","Set","from","shuffleArray","a","Math","random","sort","b","chunkArray","size","head","slice","tail","concat","_toConsumableArray","omitFromArray","value","indexOf","difference","array1","array2","res","item","push"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkjs/src/arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from './internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\nexport function createArray(arrayLength: number, startIndex = 0): number[] {\n  return new Array(arrayLength).fill(null).map((_, index) => startIndex + index);\n}\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}