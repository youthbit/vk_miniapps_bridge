{"ast":null,"code":"import * as React from 'react';\nimport vkBridge from '@vkontakte/vk-bridge';\nimport { platform } from '../../lib/platform';\nexport var WebviewType;\n\n(function (WebviewType) {\n  WebviewType[\"VKAPPS\"] = \"vkapps\";\n  WebviewType[\"INTERNAL\"] = \"internal\";\n})(WebviewType || (WebviewType = {}));\n\nexport var ConfigProviderContext = /*#__PURE__*/React.createContext({\n  webviewType: WebviewType.VKAPPS,\n  isWebView: vkBridge.isWebView(),\n  transitionMotionEnabled: true,\n  platform: platform(),\n  appearance: undefined,\n  // undefined обозначает что тема должна определиться автоматически\n  locale: 'ru'\n});\nexport var useConfigProvider = function useConfigProvider() {\n  return React.useContext(ConfigProviderContext);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAyC,sBAAzC;AACA,SAASC,QAAT,QAAuC,oBAAvC;AAEA,WAAYC,WAAZ;;AAGC,WAHWA,WAGX,EAHsB;EAAXA,WAAW,UAAXA,GAAW,QAAXA;EAAAA,WAAW,YAAXA,GAAW,UAAXA;AAAW,CAGtB,EAHWA,WAAW,KAAXA,WAAW,MAGtB;;AA8BD,OAAO,IAAMC,qBAAqB,gBAAGJ,KAAK,CAACK,aAANL,CAAoD;EACvFM,WAAW,EAAEH,WAAW,CAACI,MAD8D;EAEvFC,SAAS,EAAEP,QAAQ,CAACO,SAATP,EAF4E;EAGvFQ,uBAAuB,EAAE,IAH8D;EAIvFP,QAAQ,EAAEA,QAAQ,EAJqE;EAKvFQ,UAAU,EAAEC,SAL2E;EAKhE;EACvBC,MAAM,EAAE;AAN+E,CAApDZ,CAA9B;AASP,OAAO,IAAMa,iBAAiB,GAAG,SAApBA,iBAAoB,GAAH;EAAA,OAASb,KAAK,CAACc,UAANd,CAAiBI,qBAAjBJ,CAAT;AAAgD,CAAvE","names":["React","vkBridge","platform","WebviewType","ConfigProviderContext","createContext","webviewType","VKAPPS","isWebView","transitionMotionEnabled","appearance","undefined","locale","useConfigProvider","useContext"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/components/ConfigProvider/ConfigProviderContext.tsx"],"sourcesContent":["import * as React from 'react';\nimport vkBridge, { AppearanceType } from '@vkontakte/vk-bridge';\nimport { platform, PlatformType } from '../../lib/platform';\n\nexport enum WebviewType {\n  VKAPPS = 'vkapps',\n  INTERNAL = 'internal',\n}\n\nexport interface ConfigProviderContextInterface {\n  /**\n   * Подсказывает приложению, обёрнутому в `ConfigProvider`, где открыто приложение: внутри webview или в мобильном браузере\n   */\n  isWebView: boolean;\n  /**\n   * Тип вебвью.<br>\n   * В случае `WebviewType.VKAPPS` интерфейс будет адаптирован для отображения в вебвью Mini Apps (системные контролы в правой части шапки)\n   */\n  webviewType: WebviewType.INTERNAL | WebviewType.VKAPPS;\n  /**\n   * Тип цветовой схемы – `light` или `dark`\n   */\n  appearance: AppearanceType | undefined;\n  /**\n   * Включена ли анимация переходов между экранами в `Root` и `View`\n   */\n  transitionMotionEnabled: boolean;\n  /**\n   * Платформа\n   */\n  platform: PlatformType;\n  /**\n   * Строка с языковой меткой BCP 47\n   */\n  locale: string;\n}\n\nexport const ConfigProviderContext = React.createContext<ConfigProviderContextInterface>({\n  webviewType: WebviewType.VKAPPS,\n  isWebView: vkBridge.isWebView(),\n  transitionMotionEnabled: true,\n  platform: platform(),\n  appearance: undefined, // undefined обозначает что тема должна определиться автоматически\n  locale: 'ru',\n});\n\nexport const useConfigProvider = () => React.useContext(ConfigProviderContext);\n"]},"metadata":{},"sourceType":"module"}