{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { Keys, pressedKey } from '../lib/accessibility';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\nexport var ENABLE_KEYBOARD_INPUT_EVENT_NAME = 'enableKeyboardInput';\nexport var DISABLE_KEYBOARD_INPUT_EVENT_NAME = 'disableKeyboardInput';\nexport function useKeyboardInputTracker() {\n  var _useDOM = useDOM(),\n      document = _useDOM.document;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isKeyboardInputActive = _React$useState2[0],\n      toggleKeyboardInput = _React$useState2[1];\n\n  var enableKeyboardInput = React.useCallback(function () {\n    toggleKeyboardInput(true);\n  }, []);\n  var handleKeydown = React.useCallback(function (e) {\n    if (pressedKey(e) === Keys.TAB) {\n      enableKeyboardInput();\n    }\n  }, [enableKeyboardInput]);\n  var disableKeyboardInput = React.useCallback(function () {\n    toggleKeyboardInput(false);\n  }, []);\n  var eventOptions = {\n    passive: true,\n    capture: true\n  };\n  useGlobalEventListener(document, 'keydown', handleKeydown, eventOptions);\n  useGlobalEventListener(document, 'mousedown', disableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, 'touchstart', disableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, ENABLE_KEYBOARD_INPUT_EVENT_NAME, enableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, DISABLE_KEYBOARD_INPUT_EVENT_NAME, disableKeyboardInput, eventOptions);\n  return isKeyboardInputActive;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,sBAAjC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAEA,OAAO,IAAMC,gCAAgC,GAAG,qBAAzC;AACP,OAAO,IAAMC,iCAAiC,GAAG,sBAA1C;AAEP,OAAO,SAASC,uBAAT,GAA4C;EACjD,cAAqBJ,MAAM,EAA3B;EAAA,IAAQK,QAAQ,WAARA,QAAR;;EAEA,sBAAqDR,KAAK,CAACS,QAANT,CAAwB,KAAxBA,CAArD;EAAA,IAAmFU,qDAAnF;EAAA,IAAOC,qBAAqB,sBAA5B;EAAA,IAA8BC,mBAAmB,sBAAjD;;EAEA,IAAMC,mBAAmB,GAAGb,KAAK,CAACc,WAANd,CAAkB,YAAM;IAClDY,mBAAmB,CAAC,IAAD,CAAnBA;EACD,CAF2BZ,EAEzB,EAFyBA,CAA5B;EAIA,IAAMe,aAAa,GAAGf,KAAK,CAACc,WAANd,CACpB,UAACgB,CAAD,EAAsB;IACpB,IAAId,UAAU,CAACc,CAAD,CAAVd,KAAkBD,IAAI,CAACgB,GAA3B,EAAgC;MAC9BJ,mBAAmB;IACrB;EACD,CALmBb,EAMpB,CAACa,mBAAD,CANoBb,CAAtB;EASA,IAAMkB,oBAAoB,GAAGlB,KAAK,CAACc,WAANd,CAAkB,YAAM;IACnDY,mBAAmB,CAAC,KAAD,CAAnBA;EACD,CAF4BZ,EAE1B,EAF0BA,CAA7B;EAIA,IAAMmB,YAAY,GAAG;IACnBC,OAAO,EAAE,IADU;IAEnBC,OAAO,EAAE;EAFU,CAArB;EAKAjB,sBAAsB,CAACI,QAAD,EAAW,SAAX,EAAsBO,aAAtB,EAAqCI,YAArC,CAAtBf;EACAA,sBAAsB,CAACI,QAAD,EAAW,WAAX,EAAwBU,oBAAxB,EAA8CC,YAA9C,CAAtBf;EACAA,sBAAsB,CAACI,QAAD,EAAW,YAAX,EAAyBU,oBAAzB,EAA+CC,YAA/C,CAAtBf;EACAA,sBAAsB,CACpBI,QADoB,EAEpBH,gCAFoB,EAGpBQ,mBAHoB,EAIpBM,YAJoB,CAAtBf;EAMAA,sBAAsB,CACpBI,QADoB,EAEpBF,iCAFoB,EAGpBY,oBAHoB,EAIpBC,YAJoB,CAAtBf;EAOA,OAAOO,qBAAP;AACF","names":["React","Keys","pressedKey","useDOM","useGlobalEventListener","ENABLE_KEYBOARD_INPUT_EVENT_NAME","DISABLE_KEYBOARD_INPUT_EVENT_NAME","useKeyboardInputTracker","document","useState","_React$useState2","isKeyboardInputActive","toggleKeyboardInput","enableKeyboardInput","useCallback","handleKeydown","e","TAB","disableKeyboardInput","eventOptions","passive","capture"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/hooks/useKeyboardInputTracker.ts"],"sourcesContent":["import * as React from 'react';\nimport { Keys, pressedKey } from '../lib/accessibility';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\nexport const ENABLE_KEYBOARD_INPUT_EVENT_NAME = 'enableKeyboardInput';\nexport const DISABLE_KEYBOARD_INPUT_EVENT_NAME = 'disableKeyboardInput';\n\nexport function useKeyboardInputTracker(): boolean {\n  const { document } = useDOM();\n\n  const [isKeyboardInputActive, toggleKeyboardInput] = React.useState<boolean>(false);\n\n  const enableKeyboardInput = React.useCallback(() => {\n    toggleKeyboardInput(true);\n  }, []);\n\n  const handleKeydown = React.useCallback(\n    (e: KeyboardEvent) => {\n      if (pressedKey(e) === Keys.TAB) {\n        enableKeyboardInput();\n      }\n    },\n    [enableKeyboardInput],\n  );\n\n  const disableKeyboardInput = React.useCallback(() => {\n    toggleKeyboardInput(false);\n  }, []);\n\n  const eventOptions = {\n    passive: true,\n    capture: true,\n  };\n\n  useGlobalEventListener(document, 'keydown', handleKeydown, eventOptions);\n  useGlobalEventListener(document, 'mousedown', disableKeyboardInput, eventOptions);\n  useGlobalEventListener(document, 'touchstart', disableKeyboardInput, eventOptions);\n  useGlobalEventListener(\n    document,\n    ENABLE_KEYBOARD_INPUT_EVENT_NAME,\n    enableKeyboardInput,\n    eventOptions,\n  );\n  useGlobalEventListener(\n    document,\n    DISABLE_KEYBOARD_INPUT_EVENT_NAME,\n    disableKeyboardInput,\n    eventOptions,\n  );\n\n  return isKeyboardInputActive;\n}\n"]},"metadata":{},"sourceType":"module"}