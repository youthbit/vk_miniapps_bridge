{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport var useChipsInput = function useChipsInput(props) {\n  var value = props.value,\n      getOptionValue = props.getOptionValue,\n      onChange = props.onChange,\n      onInputChange = props.onInputChange,\n      getNewOptionData = props.getNewOptionData;\n\n  var _React$useState = React.useState(props.inputValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fieldValue = _React$useState2[0],\n      setFieldValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(value !== null && value !== void 0 ? value : []),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedOptions = _React$useState4[0],\n      setSelectedOptions = _React$useState4[1];\n\n  var clearInput = React.useCallback(function () {\n    setFieldValue('');\n    onInputChange({\n      target: {\n        value: ''\n      }\n    });\n  }, [onInputChange]);\n  var handleInputChange = React.useCallback(function (e) {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n  var toggleOption = React.useCallback(function (newOption, value) {\n    var newSelectedOptions = selectedOptions.filter(function (option) {\n      return getOptionValue(newOption) !== getOptionValue(option);\n    });\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n  var addOption = React.useCallback(function (newOption) {\n    return toggleOption(newOption, true);\n  }, [toggleOption]);\n  var addOptionFromInput = React.useCallback(function () {\n    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  var removeOption = React.useCallback(function (value) {\n    toggleOption(getNewOptionData(undefined, value), false);\n  }, [toggleOption, getNewOptionData]);\n  React.useEffect(function () {\n    setSelectedOptions(value);\n    return function () {\n      return setSelectedOptions([]);\n    };\n  }, [props.value, value]);\n  React.useEffect(function () {\n    setFieldValue(props.inputValue);\n    return function () {\n      return setFieldValue('');\n    };\n  }, [props.inputValue]);\n  return {\n    fieldValue: fieldValue,\n    setFieldValue: setFieldValue,\n    selectedOptions: selectedOptions,\n    setSelectedOptions: setSelectedOptions,\n    clearInput: clearInput,\n    toggleOption: toggleOption,\n    addOption: addOption,\n    addOptionFromInput: addOptionFromInput,\n    removeOption: removeOption,\n    handleInputChange: handleInputChange\n  };\n};","map":{"version":3,"mappings":"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","names":["React","useChipsInput","props","value","getOptionValue","onChange","onInputChange","getNewOptionData","useState","inputValue","_React$useState2","fieldValue","setFieldValue","_React$useState4","selectedOptions","setSelectedOptions","clearInput","useCallback","target","handleInputChange","e","toggleOption","newOption","newSelectedOptions","filter","option","push","addOption","addOptionFromInput","trimmedValue","trim","undefined","removeOption","useEffect"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/hooks/useChipsInput.ts"],"sourcesContent":["import * as React from 'react';\nimport { ChipOption } from '../components/Chip/Chip';\nimport { ChipsInputBaseProps } from '../components/ChipsInputBase/ChipsInputBase';\n\nexport const useChipsInput = <Option extends ChipOption>(\n  props: Partial<ChipsInputBaseProps<Option>>,\n) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } = props;\n\n  const [fieldValue, setFieldValue] = React.useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = React.useState(value ?? []);\n\n  const clearInput = React.useCallback(() => {\n    setFieldValue('');\n    onInputChange!({ target: { value: '' } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(e.target.value);\n      onInputChange!(e);\n    },\n    [onInputChange],\n  );\n\n  const toggleOption = React.useCallback(\n    (newOption: Option, value?: boolean) => {\n      const newSelectedOptions = selectedOptions.filter(\n        (option: Option) => getOptionValue!(newOption) !== getOptionValue!(option),\n      );\n\n      if (value === true) {\n        newSelectedOptions.push(newOption);\n      }\n\n      setSelectedOptions(newSelectedOptions);\n      onChange!(newSelectedOptions);\n    },\n    [selectedOptions, getOptionValue, onChange],\n  );\n\n  const addOption = React.useCallback(\n    (newOption: Option) => toggleOption(newOption, true),\n    [toggleOption],\n  );\n  const addOptionFromInput = React.useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData!(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = React.useCallback(\n    (value) => {\n      toggleOption(getNewOptionData!(undefined, value as string), false);\n    },\n    [toggleOption, getNewOptionData],\n  );\n\n  React.useEffect(() => {\n    setSelectedOptions(value as Option[]);\n\n    return () => setSelectedOptions([]);\n  }, [props.value, value]);\n\n  React.useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue('');\n  }, [props.inputValue]);\n\n  return {\n    fieldValue,\n    setFieldValue,\n    selectedOptions,\n    setSelectedOptions,\n    clearInput,\n    toggleOption,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n    handleInputChange,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}