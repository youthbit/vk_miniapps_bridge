{"ast":null,"code":"import * as React from 'react';\nimport { AdaptivityContext } from '../../components/AdaptivityProvider/AdaptivityContext';\nimport { usePlatform } from '../usePlatform';\nimport { sizeXCompactClassNames, sizeXRegularClassNames, sizeYCompactClassNames, sizeYRegularClassNames, viewWidthClassNames, deviceTypeClassNames } from './constants';\nimport { getAdaptiveSizeType, getAdaptiveViewWidth, getAdaptiveDeviceType } from './helpers';\nexport var useAdaptivityConditionalRender = function useAdaptivityConditionalRender() {\n  var _React$useContext = React.useContext(AdaptivityContext),\n      sizeXContext = _React$useContext.sizeX,\n      sizeYContext = _React$useContext.sizeY,\n      viewWidthContext = _React$useContext.viewWidth,\n      viewHeightContext = _React$useContext.viewHeight,\n      hasPointerContext = _React$useContext.hasPointer;\n\n  var platform = usePlatform();\n  return React.useMemo(function () {\n    var sizeX = getAdaptiveSizeType(sizeXContext, sizeXCompactClassNames, sizeXRegularClassNames);\n    var sizeY = getAdaptiveSizeType(sizeYContext, sizeYCompactClassNames, sizeYRegularClassNames);\n    var viewWidth = getAdaptiveViewWidth(viewWidthContext, viewWidthClassNames);\n    var deviceType = getAdaptiveDeviceType(viewWidthContext, viewHeightContext, hasPointerContext, platform, deviceTypeClassNames);\n    return {\n      sizeX: sizeX,\n      sizeY: sizeY,\n      viewWidth: viewWidth,\n      deviceType: deviceType\n    };\n  }, [sizeXContext, sizeYContext, viewWidthContext, viewHeightContext, hasPointerContext, platform]);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,iBAAT,QAAkC,uDAAlC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,SACEC,sBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,sBAJF,EAKEC,mBALF,EAMEC,oBANF,QAOO,aAPP;AAQA,SAASC,mBAAT,EAA8BC,oBAA9B,EAAoDC,qBAApD,QAAiF,WAAjF;AAEA,OAAO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,GAAsC;EAClF,wBAMIZ,KAAK,CAACa,UAANb,CAAiBC,iBAAjBD,CANJ;EAAA,IACSc,YAAY,qBAAnBC,KADF;EAAA,IAESC,YAAY,qBAAnBC,KAFF;EAAA,IAGaC,gBAAgB,qBAA3BC,SAHF;EAAA,IAIcC,iBAAiB,qBAA7BC,UAJF;EAAA,IAKcC,iBAAiB,qBAA7BC,UALF;;EAOA,IAAMC,QAAQ,GAAGtB,WAAW,EAA5B;EAEA,OAAOF,KAAK,CAACyB,OAANzB,CAAc,YAAM;IACzB,IAAMe,KAAK,GAAGN,mBAAmB,CAACK,YAAD,EAAeX,sBAAf,EAAuCC,sBAAvC,CAAjC;IACA,IAAMa,KAAK,GAAGR,mBAAmB,CAACO,YAAD,EAAeX,sBAAf,EAAuCC,sBAAvC,CAAjC;IACA,IAAMa,SAAS,GAAGT,oBAAoB,CAACQ,gBAAD,EAAmBX,mBAAnB,CAAtC;IACA,IAAMmB,UAAU,GAAGf,qBAAqB,CACtCO,gBADsC,EAEtCE,iBAFsC,EAGtCE,iBAHsC,EAItCE,QAJsC,EAKtChB,oBALsC,CAAxC;IAOA,OAAO;MACLO,KAAK,EAALA,KADK;MAELE,KAAK,EAALA,KAFK;MAGLE,SAAS,EAATA,SAHK;MAILO,UAAU,EAAVA;IAJK,CAAP;EAMD,CAjBM1B,EAiBJ,CACDc,YADC,EAEDE,YAFC,EAGDE,gBAHC,EAIDE,iBAJC,EAKDE,iBALC,EAMDE,QANC,CAjBIxB,CAAP;AAyBD,CAnCM","names":["React","AdaptivityContext","usePlatform","sizeXCompactClassNames","sizeXRegularClassNames","sizeYCompactClassNames","sizeYRegularClassNames","viewWidthClassNames","deviceTypeClassNames","getAdaptiveSizeType","getAdaptiveViewWidth","getAdaptiveDeviceType","useAdaptivityConditionalRender","useContext","sizeXContext","sizeX","sizeYContext","sizeY","viewWidthContext","viewWidth","viewHeightContext","viewHeight","hasPointerContext","hasPointer","platform","useMemo","deviceType"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/hooks/useAdaptivityConditionalRender/useAdaptivityConditionalRender.tsx"],"sourcesContent":["import * as React from 'react';\nimport { AdaptivityContext } from '../../components/AdaptivityProvider/AdaptivityContext';\nimport { usePlatform } from '../usePlatform';\nimport type { UseAdaptivityConditionalRender } from './types';\nimport {\n  sizeXCompactClassNames,\n  sizeXRegularClassNames,\n  sizeYCompactClassNames,\n  sizeYRegularClassNames,\n  viewWidthClassNames,\n  deviceTypeClassNames,\n} from './constants';\nimport { getAdaptiveSizeType, getAdaptiveViewWidth, getAdaptiveDeviceType } from './helpers';\n\nexport const useAdaptivityConditionalRender = (): UseAdaptivityConditionalRender => {\n  const {\n    sizeX: sizeXContext,\n    sizeY: sizeYContext,\n    viewWidth: viewWidthContext,\n    viewHeight: viewHeightContext,\n    hasPointer: hasPointerContext,\n  } = React.useContext(AdaptivityContext);\n  const platform = usePlatform();\n\n  return React.useMemo(() => {\n    const sizeX = getAdaptiveSizeType(sizeXContext, sizeXCompactClassNames, sizeXRegularClassNames);\n    const sizeY = getAdaptiveSizeType(sizeYContext, sizeYCompactClassNames, sizeYRegularClassNames);\n    const viewWidth = getAdaptiveViewWidth(viewWidthContext, viewWidthClassNames);\n    const deviceType = getAdaptiveDeviceType(\n      viewWidthContext,\n      viewHeightContext,\n      hasPointerContext,\n      platform,\n      deviceTypeClassNames,\n    );\n    return {\n      sizeX,\n      sizeY,\n      viewWidth,\n      deviceType,\n    };\n  }, [\n    sizeXContext,\n    sizeYContext,\n    viewWidthContext,\n    viewHeightContext,\n    hasPointerContext,\n    platform,\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}