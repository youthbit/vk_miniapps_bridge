{"ast":null,"code":"import { computeBrowserInfo } from './browser';\nimport { querystring } from '@vkontakte/vkjs';\nimport { canUseDOM } from './dom';\nexport var Platform;\n\n(function (Platform) {\n  Platform[\"ANDROID\"] = \"android\";\n  Platform[\"IOS\"] = \"ios\";\n  Platform[\"VKCOM\"] = \"vkcom\";\n})(Platform || (Platform = {}));\n\nvar PLATFORM_ALIAS = {\n  desktop_web: Platform.VKCOM\n};\n\nfunction isPlatformAlias(platformAlias) {\n  return platformAlias in PLATFORM_ALIAS;\n}\n/**\n * Значение, которое передаётся в качестве query-параметра при открытии VK Mini Apps\n * @see {@link https://dev.vk.com/mini-apps/development/launch-params#vk_platform vk_platform}\n */\n\n\nfunction getPlatformByQueryString(queryString) {\n  try {\n    var parsedQuery = querystring.parse(queryString);\n    var platformAliasByQuery = parsedQuery['vk_platform'];\n    return typeof platformAliasByQuery === 'string' && isPlatformAlias(platformAliasByQuery) ? PLATFORM_ALIAS[platformAliasByQuery] : undefined;\n  } catch (e) {\n    console.warn(e);\n    return undefined;\n  }\n}\n\nvar platformByQueryString = canUseDOM ? getPlatformByQueryString(location.search) : undefined;\nexport function platform(browserInfo) {\n  if (platformByQueryString) {\n    return platformByQueryString;\n  }\n\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === 'ios' ? Platform.IOS : Platform.ANDROID;\n}","map":{"version":3,"mappings":"AAAA,SAAsBA,kBAAtB,QAAgD,WAAhD;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,WAAYC,QAAZ;;AAIC,WAJWA,QAIX,EAJmB;EAARA,QAAQ,WAARA,GAAQ,SAARA;EAAAA,QAAQ,OAARA,GAAQ,KAARA;EAAAA,QAAQ,SAARA,GAAQ,OAARA;AAAQ,CAInB,EAJWA,QAAQ,KAARA,QAAQ,MAInB;;AAED,IAAMC,cAAc,GAAG;EACrBC,WAAW,EAAEF,QAAQ,CAACG;AADD,CAAvB;;AAIA,SAASC,eAAT,CAAyBC,aAAzB,EAA8F;EAC5F,OAAOA,aAAa,IAAIJ,cAAxB;AACF;AAEA;AACA;AACA;AACA;;;AACA,SAASK,wBAAT,CAAkCC,WAAlC,EAA6E;EAC3E,IAAI;IACF,IAAMC,WAAW,GAAGV,WAAW,CAACW,KAAZX,CAAkBS,WAAlBT,CAApB;IACA,IAAMY,oBAAoB,GAAGF,WAAW,CAAC,aAAD,CAAxC;IAEA,OAAO,OAAOE,oBAAP,KAAgC,QAAhC,IAA4CN,eAAe,CAACM,oBAAD,CAA3D,GACHT,cAAc,CAACS,oBAAD,CADX,GAEHC,SAFJ;EAGD,CAPD,CAOE,OAAOC,CAAP,EAAU;IACVC,OAAO,CAACC,IAARD,CAAaD,CAAbC;IAEA,OAAOF,SAAP;EACF;AACF;;AAEA,IAAMI,qBAAqB,GAAGhB,SAAS,GAAGO,wBAAwB,CAACU,QAAQ,CAACC,MAAV,CAA3B,GAA+CN,SAAtF;AAIA,OAAO,SAASO,QAAT,CAAkBC,WAAlB,EAA2D;EAChE,IAAIJ,qBAAJ,EAA2B;IACzB,OAAOA,qBAAP;EACF;;EAEA,IAAI,CAACI,WAAL,EAAkB;IAChBA,WAAW,GAAGtB,kBAAkB,EAAhCsB;EACF;;EAEA,OAAOA,WAAW,CAACC,MAAZD,KAAuB,KAAvBA,GAA+BnB,QAAQ,CAACqB,GAAxCF,GAA8CnB,QAAQ,CAACsB,OAA9D;AACF","names":["computeBrowserInfo","querystring","canUseDOM","Platform","PLATFORM_ALIAS","desktop_web","VKCOM","isPlatformAlias","platformAlias","getPlatformByQueryString","queryString","parsedQuery","parse","platformAliasByQuery","undefined","e","console","warn","platformByQueryString","location","search","platform","browserInfo","system","IOS","ANDROID"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/lib/platform.ts"],"sourcesContent":["import { BrowserInfo, computeBrowserInfo } from './browser';\nimport { querystring } from '@vkontakte/vkjs';\nimport { canUseDOM } from './dom';\n\nexport enum Platform {\n  ANDROID = 'android',\n  IOS = 'ios',\n  VKCOM = 'vkcom',\n}\n\nconst PLATFORM_ALIAS = {\n  desktop_web: Platform.VKCOM,\n};\n\nfunction isPlatformAlias(platformAlias: string): platformAlias is keyof typeof PLATFORM_ALIAS {\n  return platformAlias in PLATFORM_ALIAS;\n}\n\n/**\n * Значение, которое передаётся в качестве query-параметра при открытии VK Mini Apps\n * @see {@link https://dev.vk.com/mini-apps/development/launch-params#vk_platform vk_platform}\n */\nfunction getPlatformByQueryString(queryString: string): Platform | undefined {\n  try {\n    const parsedQuery = querystring.parse(queryString);\n    const platformAliasByQuery = parsedQuery['vk_platform'];\n\n    return typeof platformAliasByQuery === 'string' && isPlatformAlias(platformAliasByQuery)\n      ? PLATFORM_ALIAS[platformAliasByQuery]\n      : undefined;\n  } catch (e) {\n    console.warn(e);\n\n    return undefined;\n  }\n}\n\nconst platformByQueryString = canUseDOM ? getPlatformByQueryString(location.search) : undefined;\n\nexport type PlatformType = Platform.ANDROID | Platform.IOS | Platform.VKCOM | string;\n\nexport function platform(browserInfo?: BrowserInfo): PlatformType {\n  if (platformByQueryString) {\n    return platformByQueryString;\n  }\n\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === 'ios' ? Platform.IOS : Platform.ANDROID;\n}\n"]},"metadata":{},"sourceType":"module"}