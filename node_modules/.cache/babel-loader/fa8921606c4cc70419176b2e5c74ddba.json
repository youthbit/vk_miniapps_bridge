{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"onRemove\", \"removePlaceholder\", \"onDragFinish\", \"before\", \"after\", \"disabled\", \"draggable\", \"Component\", \"onChange\", \"name\", \"value\", \"checked\", \"defaultChecked\", \"getRootRef\", \"draggerLabel\", \"className\", \"style\"],\n    _excluded2 = [\"dragging\"];\nimport * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { Platform } from '../../lib/platform';\nimport { SimpleCell } from '../SimpleCell/SimpleCell';\nimport { Removable } from '../Removable/Removable';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useDraggable } from './useDraggable';\nimport { ListContext } from '../List/ListContext';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { CellCheckbox } from './CellCheckbox/CellCheckbox';\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\n\nexport var Cell = function Cell(_ref) {\n  var mode = _ref.mode,\n      _ref$onRemove = _ref.onRemove,\n      _onRemove = _ref$onRemove === void 0 ? noop : _ref$onRemove,\n      _ref$removePlaceholde = _ref.removePlaceholder,\n      removePlaceholder = _ref$removePlaceholde === void 0 ? 'Удалить' : _ref$removePlaceholde,\n      onDragFinish = _ref.onDragFinish,\n      before = _ref.before,\n      after = _ref.after,\n      disabled = _ref.disabled,\n      draggable = _ref.draggable,\n      Component = _ref.Component,\n      onChange = _ref.onChange,\n      name = _ref.name,\n      value = _ref.value,\n      checked = _ref.checked,\n      defaultChecked = _ref.defaultChecked,\n      getRootRef = _ref.getRootRef,\n      _ref$draggerLabel = _ref.draggerLabel,\n      draggerLabel = _ref$draggerLabel === void 0 ? 'Перенести ячейку' : _ref$draggerLabel,\n      className = _ref.className,\n      style = _ref.style,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n\n  var selectable = mode === 'selectable';\n  var removable = mode === 'removable';\n  var platform = usePlatform();\n  var rootElRef = useExternRef(getRootRef);\n\n  var _useDraggable = useDraggable({\n    rootElRef: rootElRef,\n    onDragFinish: onDragFinish\n  }),\n      dragging = _useDraggable.dragging,\n      draggableProps = _objectWithoutProperties(_useDraggable, _excluded2);\n\n  var _React$useContext = React.useContext(ListContext),\n      toggleDrag = _React$useContext.toggleDrag;\n\n  React.useEffect(function () {\n    if (dragging) {\n      toggleDrag(true);\n      return function () {\n        return toggleDrag(false);\n      };\n    }\n\n    return undefined;\n  }, [dragging, toggleDrag]);\n  var dragger;\n\n  if (draggable) {\n    dragger = /*#__PURE__*/React.createElement(CellDragger, _extends({\n      className: \"vkuiCell__dragger\",\n      \"aria-label\": draggerLabel\n    }, draggableProps));\n  }\n\n  var checkbox;\n\n  if (selectable) {\n    var checkboxProps = {\n      name: name,\n      value: value,\n      onChange: onChange,\n      defaultChecked: defaultChecked,\n      checked: checked,\n      disabled: disabled\n    };\n    checkbox = /*#__PURE__*/React.createElement(CellCheckbox, _extends({\n      className: \"vkuiCell__checkbox\"\n    }, checkboxProps));\n  }\n\n  var simpleCellDisabled = draggable && !selectable || removable || disabled;\n  var hasActive = !simpleCellDisabled && !dragging;\n  var cellClasses = classNames(\"vkuiCell\", platform === Platform.IOS && \"vkuiCell--ios\", dragging && \"vkuiCell--dragging\", removable && \"vkuiCell--removable\", selectable && \"vkuiCell--selectable\", disabled && \"vkuiCell--disabled\");\n  var simpleCell = /*#__PURE__*/React.createElement(SimpleCell, _extends({\n    hasActive: hasActive,\n    hasHover: hasActive\n  }, restProps, {\n    className: \"vkuiCell__content\",\n    disabled: simpleCellDisabled,\n    Component: selectable ? 'label' : Component,\n    before: /*#__PURE__*/React.createElement(React.Fragment, null, draggable && platform !== Platform.IOS && dragger, selectable && checkbox, before),\n    after: /*#__PURE__*/React.createElement(React.Fragment, null, draggable && platform === Platform.IOS && dragger, after)\n  }));\n\n  if (removable) {\n    return /*#__PURE__*/React.createElement(Removable, {\n      className: classNames(cellClasses, className),\n      style: style,\n      getRootRef: rootElRef,\n      removePlaceholder: removePlaceholder,\n      onRemove: function onRemove(e) {\n        return _onRemove(e, rootElRef.current);\n      }\n    }, simpleCell);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(cellClasses, className),\n    style: style,\n    ref: rootElRef\n  }, simpleCell);\n};","map":{"version":3,"mappings":"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","names":["React","classNames","noop","Platform","SimpleCell","Removable","usePlatform","useExternRef","useDraggable","ListContext","CellDragger","CellCheckbox","Cell","_ref","mode","_ref$onRemove","onRemove","_ref$removePlaceholde","removePlaceholder","onDragFinish","before","after","disabled","draggable","Component","onChange","name","value","checked","defaultChecked","getRootRef","_ref$draggerLabel","draggerLabel","className","style","restProps","selectable","removable","platform","rootElRef","dragging","draggableProps","useContext","toggleDrag","useEffect","undefined","dragger","_extends","checkbox","checkboxProps","simpleCellDisabled","hasActive","cellClasses","IOS","simpleCell","hasHover","Fragment","e","current","ref"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/components/Cell/Cell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { Platform } from '../../lib/platform';\nimport { SimpleCell, SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { HasRootRef } from '../../types';\nimport { Removable, RemovableProps } from '../Removable/Removable';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useDraggable } from './useDraggable';\nimport { ListContext } from '../List/ListContext';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { CellCheckbox, CellCheckboxProps } from './CellCheckbox/CellCheckbox';\nimport styles from './Cell.module.css';\n\nexport interface CellProps\n  extends Omit<SimpleCellProps, 'getRootRef'>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: 'removable' | 'selectable';\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: ({ from, to }: { from: number; to: number }) => void;\n  /**\n   * aria-label для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell = ({\n  mode,\n  onRemove = noop,\n  removePlaceholder = 'Удалить',\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  draggable,\n  Component,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = 'Перенести ячейку',\n  className,\n  style,\n  ...restProps\n}: CellProps) => {\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n\n  const platform = usePlatform();\n\n  const rootElRef = useExternRef(getRootRef);\n\n  const { dragging, ...draggableProps } = useDraggable({\n    rootElRef,\n    onDragFinish,\n  });\n\n  const { toggleDrag } = React.useContext(ListContext);\n  React.useEffect(() => {\n    if (dragging) {\n      toggleDrag(true);\n      return () => toggleDrag(false);\n    }\n    return undefined;\n  }, [dragging, toggleDrag]);\n\n  let dragger;\n  if (draggable) {\n    dragger = (\n      <CellDragger\n        className={styles['Cell__dragger']}\n        aria-label={draggerLabel}\n        {...draggableProps}\n      />\n    );\n  }\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      onChange,\n      defaultChecked,\n      checked,\n      disabled,\n    };\n    checkbox = <CellCheckbox className={styles['Cell__checkbox']} {...checkboxProps} />;\n  }\n\n  const simpleCellDisabled = (draggable && !selectable) || removable || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(\n    styles['Cell'],\n    platform === Platform.IOS && styles['Cell--ios'],\n    dragging && styles['Cell--dragging'],\n    removable && styles['Cell--removable'],\n    selectable && styles['Cell--selectable'],\n    disabled && styles['Cell--disabled'],\n  );\n\n  const simpleCell = (\n    <SimpleCell\n      hasActive={hasActive}\n      hasHover={hasActive}\n      {...restProps}\n      className={styles['Cell__content']}\n      disabled={simpleCellDisabled}\n      Component={selectable ? 'label' : Component}\n      before={\n        <React.Fragment>\n          {draggable && platform !== Platform.IOS && dragger}\n          {selectable && checkbox}\n          {before}\n        </React.Fragment>\n      }\n      after={\n        <React.Fragment>\n          {draggable && platform === Platform.IOS && dragger}\n          {after}\n        </React.Fragment>\n      }\n    />\n  );\n\n  if (removable) {\n    return (\n      <Removable\n        className={classNames(cellClasses, className)}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef.current)}\n      >\n        {simpleCell}\n      </Removable>\n    );\n  }\n\n  return (\n    <div className={classNames(cellClasses, className)} style={style} ref={rootElRef}>\n      {simpleCell}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}