{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"value\", \"label\"],\n    _excluded2 = [\"style\", \"className\", \"getRootRef\", \"value\", \"onChange\", \"onInputChange\", \"onKeyDown\", \"onBlur\", \"onFocus\", \"children\", \"inputValue\", \"getRef\", \"placeholder\", \"getOptionValue\", \"getOptionLabel\", \"getNewOptionData\", \"renderChip\", \"inputAriaLabel\"];\nimport * as React from 'react';\nimport { getSizeYClassName } from '../../helpers/getSizeYClassName';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { Chip } from '../Chip/Chip';\nimport { useChipsInput } from '../../hooks/useChipsInput';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nexport var chipsInputDefaultProps = {\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: '',\n  inputAriaLabel: 'Введите ваше значение...',\n  getOptionValue: function getOptionValue(option) {\n    return option.value;\n  },\n  getOptionLabel: function getOptionLabel(option) {\n    return option.label;\n  },\n  getNewOptionData: function getNewOptionData(_, label) {\n    return {\n      value: label,\n      label: label\n    };\n  },\n  renderChip: function renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    var disabled = props.disabled,\n        value = props.value,\n        label = props.label,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    return /*#__PURE__*/React.createElement(Chip, _extends({\n      value: value,\n      removable: !disabled\n    }, rest), label);\n  }\n};\nexport var ChipsInputBase = function ChipsInputBase(props) {\n  var propsWithDefault = _objectSpread(_objectSpread({}, chipsInputDefaultProps), props);\n\n  var style = propsWithDefault.style,\n      className = propsWithDefault.className,\n      getRootRef = propsWithDefault.getRootRef,\n      value = propsWithDefault.value,\n      onChange = propsWithDefault.onChange,\n      onInputChange = propsWithDefault.onInputChange,\n      onKeyDown = propsWithDefault.onKeyDown,\n      onBlur = propsWithDefault.onBlur,\n      onFocus = propsWithDefault.onFocus,\n      children = propsWithDefault.children,\n      inputValue = propsWithDefault.inputValue,\n      getRef = propsWithDefault.getRef,\n      placeholder = propsWithDefault.placeholder,\n      getOptionValue = propsWithDefault.getOptionValue,\n      getOptionLabel = propsWithDefault.getOptionLabel,\n      getNewOptionData = propsWithDefault.getNewOptionData,\n      renderChip = propsWithDefault.renderChip,\n      inputAriaLabel = propsWithDefault.inputAriaLabel,\n      restProps = _objectWithoutProperties(propsWithDefault, _excluded2);\n\n  var _useAdaptivity = useAdaptivity(),\n      sizeY = _useAdaptivity.sizeY;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _useChipsInput = useChipsInput(propsWithDefault),\n      fieldValue = _useChipsInput.fieldValue,\n      addOptionFromInput = _useChipsInput.addOptionFromInput,\n      removeOption = _useChipsInput.removeOption,\n      selectedOptions = _useChipsInput.selectedOptions,\n      handleInputChange = _useChipsInput.handleInputChange;\n\n  var inputRef = useExternRef(getRef);\n  var isDisabled = restProps.disabled || restProps.readOnly;\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  var handleBlur = function handleBlur(e) {\n    if (focused) {\n      setFocused(false);\n    }\n\n    onBlur(e);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    if (!focused) {\n      setFocused(true);\n    }\n\n    onFocus(e);\n  };\n\n  var handleChipRemove = function handleChipRemove(_, value) {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  var handleClick = function handleClick(e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if ((inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleClick,\n    role: \"presentation\",\n    style: style,\n    className: classNames(\"vkuiChipsInputBase\", getSizeYClassName(\"vkuiChipsInputBase\", sizeY), className),\n    ref: getRootRef\n  }, selectedOptions.map(function (option) {\n    var value = getOptionValue(option);\n    var label = getOptionLabel(option);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"\".concat(_typeof(value), \"-\").concat(value)\n    }, renderChip({\n      option: option,\n      value: value,\n      label: label,\n      onRemove: handleChipRemove,\n      disabled: Boolean(restProps.disabled),\n      className: \"vkuiChipsInputBase__chip\"\n    }));\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"vkuiChipsInputBase__label\",\n    \"aria-label\": inputAriaLabel\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\",\n    autoCapitalize: \"none\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: false,\n    \"aria-autocomplete\": \"list\",\n    className: \"vkuiChipsInputBase__el\"\n  }, restProps, {\n    ref: inputRef,\n    value: fieldValue,\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    placeholder: selectedOptions.length ? undefined : placeholder\n  }))));\n};","map":{"version":3,"mappings":"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","names":["React","getSizeYClassName","classNames","noop","Chip","useChipsInput","useAdaptivity","useExternRef","chipsInputDefaultProps","onChange","onInputChange","onKeyDown","onBlur","onFocus","value","inputValue","inputAriaLabel","getOptionValue","option","getOptionLabel","label","getNewOptionData","_","renderChip","props","disabled","rest","_excluded","_extends","removable","ChipsInputBase","propsWithDefault","style","className","getRootRef","children","getRef","placeholder","restProps","_excluded2","sizeY","useState","_React$useState2","focused","setFocused","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","inputRef","isDisabled","readOnly","handleKeyDown","e","preventDefault","key","defaultPrevented","length","handleBlur","handleFocus","handleChipRemove","undefined","handleClick","current","focus","onClick","role","ref","map","Fragment","concat","onRemove","Boolean","type","autoCapitalize","autoComplete","autoCorrect","spellCheck"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getSizeYClassName } from '../../helpers/getSizeYClassName';\nimport { HasAlign, HasRef, HasRootRef } from '../../types';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { Chip, ChipOption, ChipValue, RenderChip } from '../Chip/Chip';\nimport { useChipsInput } from '../../hooks/useChipsInput';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport styles from './ChipsInputBase.module.css';\n\nexport interface ChipsInputBaseProps<Option extends ChipOption>\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>,\n    HasRef<HTMLInputElement>,\n    HasRootRef<HTMLDivElement>,\n    HasAlign {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => React.ReactNode;\n  inputAriaLabel?: string;\n}\n\nexport const chipsInputDefaultProps: ChipsInputBaseProps<any> = {\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: '',\n  inputAriaLabel: 'Введите ваше значение...',\n  getOptionValue: (option) => option.value,\n  getOptionLabel: (option) => option.label,\n  getNewOptionData: (_, label) => ({\n    value: label,\n    label,\n  }),\n  renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    const { disabled, value, label, ...rest } = props;\n    return (\n      <Chip value={value} removable={!disabled} {...rest}>\n        {label}\n      </Chip>\n    );\n  },\n};\n\nexport const ChipsInputBase = <Option extends ChipOption>(props: ChipsInputBaseProps<Option>) => {\n  const propsWithDefault = { ...chipsInputDefaultProps, ...props };\n  const {\n    style,\n    className,\n    getRootRef,\n    value,\n    onChange,\n    onInputChange,\n    onKeyDown,\n    onBlur,\n    onFocus,\n    children,\n    inputValue,\n    getRef,\n    placeholder,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n    renderChip,\n    inputAriaLabel,\n    ...restProps\n  } = propsWithDefault;\n  const { sizeY } = useAdaptivity();\n\n  const [focused, setFocused] = React.useState(false);\n  const { fieldValue, addOptionFromInput, removeOption, selectedOptions, handleInputChange } =\n    useChipsInput(propsWithDefault);\n  const inputRef = useExternRef(getRef);\n\n  const isDisabled = restProps.disabled || restProps.readOnly;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown!(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue!(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur!(e);\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus!(e);\n  };\n\n  const handleChipRemove = (_: React.MouseEvent | undefined, value: ChipValue | undefined) => {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (inputRef?.current !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      role=\"presentation\"\n      style={style}\n      className={classNames(\n        styles['ChipsInputBase'],\n        getSizeYClassName(styles['ChipsInputBase'], sizeY),\n        className,\n      )}\n      ref={getRootRef}\n    >\n      {selectedOptions.map((option: Option) => {\n        const value = getOptionValue!(option);\n        const label = getOptionLabel!(option);\n\n        return (\n          <React.Fragment key={`${typeof value}-${value}`}>\n            {renderChip!({\n              option,\n              value,\n              label,\n              onRemove: handleChipRemove,\n              disabled: Boolean(restProps.disabled),\n              className: styles['ChipsInputBase__chip'],\n            })}\n          </React.Fragment>\n        );\n      })}\n      <label className={styles['ChipsInputBase__label']} aria-label={inputAriaLabel}>\n        <input\n          type=\"text\"\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          aria-autocomplete=\"list\"\n          className={styles['ChipsInputBase__el']}\n          {...restProps}\n          ref={inputRef}\n          value={fieldValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={selectedOptions.length ? undefined : placeholder}\n        />\n      </label>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}