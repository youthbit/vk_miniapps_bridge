{"ast":null,"code":"export var FOCUSABLE_ELEMENTS_LIST = ['a[href]', 'area[href]', 'input:not([disabled]):not([hidden]):not([type=\"hidden\"]):not([aria-hidden])', 'select:not([disabled]):not([hidden]):not([aria-hidden])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'audio', 'video', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'];\nexport var Keys;\n\n(function (Keys) {\n  Keys[\"ENTER\"] = \"Enter\";\n  Keys[\"SPACE\"] = \"Space\";\n  Keys[\"TAB\"] = \"Tab\";\n  Keys[\"ESCAPE\"] = \"Escape\";\n  Keys[\"HOME\"] = \"Home\";\n  Keys[\"END\"] = \"End\";\n  Keys[\"ARROW_LEFT\"] = \"ArrowLeft\";\n  Keys[\"ARROW_RIGHT\"] = \"ArrowRight\";\n  Keys[\"ARROW_DOWN\"] = \"ArrowDown\";\n})(Keys || (Keys = {}));\n\nvar ACCESSIBLE_KEYS = [{\n  code: Keys.ENTER,\n  key: ['Enter'],\n  keyCode: 13\n}, {\n  code: Keys.SPACE,\n  key: ['Space', 'Spacebar', ' '],\n  keyCode: 32\n}, {\n  code: Keys.TAB,\n  key: ['Tab'],\n  keyCode: 9\n}, {\n  code: Keys.ESCAPE,\n  key: ['Escape'],\n  keyCode: 27\n}, {\n  code: Keys.HOME,\n  key: ['Home'],\n  keyCode: 36\n}, {\n  code: Keys.END,\n  key: ['End'],\n  keyCode: 35\n}, {\n  code: Keys.ARROW_LEFT,\n  key: ['ArrowLeft'],\n  keyCode: 37\n}, {\n  code: Keys.ARROW_RIGHT,\n  key: ['ArrowRight'],\n  keyCode: 39\n}, {\n  code: Keys.ARROW_DOWN,\n  key: ['ArrowDown'],\n  keyCode: 40\n}];\nexport function pressedKey(e) {\n  var _ACCESSIBLE_KEYS$find;\n\n  return ((_ACCESSIBLE_KEYS$find = ACCESSIBLE_KEYS.find(function (_ref) {\n    var key = _ref.key,\n        keyCode = _ref.keyCode;\n    return key.includes(e.key) || keyCode === e.keyCode;\n  })) === null || _ACCESSIBLE_KEYS$find === void 0 ? void 0 : _ACCESSIBLE_KEYS$find.code) || null;\n}\nexport function shouldTriggerClickOnEnterOrSpace(e) {\n  var el = e.target;\n  var tagName = el.tagName;\n  var role = el.getAttribute('role');\n  var isValidKeyboardEventTarget = el.isContentEditable !== true && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && (role === 'button' || role === 'link');\n  var isNativeAnchorEl = tagName === 'A' && el.hasAttribute('href');\n  var keyPressed = pressedKey(e);\n  return isValidKeyboardEventTarget && ( // trigger buttons on Space\n  keyPressed === Keys.SPACE && role === 'button' || // trigger non-native links and buttons on Enter\n  keyPressed === Keys.ENTER && !isNativeAnchorEl);\n}","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,uBAAuB,GAAG,CACrC,SADqC,EAErC,YAFqC,EAGrC,6EAHqC,EAIrC,yDAJqC,EAKrC,0BALqC,EAMrC,wBANqC,EAOrC,QAPqC,EAQrC,OARqC,EASrC,OATqC,EAUrC,mBAVqC,EAWrC,iCAXqC,CAAhC;AAcP,WAAYC,IAAZ;;AAUC,WAVWA,IAUX,EAVe;EAAJA,IAAI,SAAJA,GAAI,OAAJA;EAAAA,IAAI,SAAJA,GAAI,OAAJA;EAAAA,IAAI,OAAJA,GAAI,KAAJA;EAAAA,IAAI,UAAJA,GAAI,QAAJA;EAAAA,IAAI,QAAJA,GAAI,MAAJA;EAAAA,IAAI,OAAJA,GAAI,KAAJA;EAAAA,IAAI,cAAJA,GAAI,WAAJA;EAAAA,IAAI,eAAJA,GAAI,YAAJA;EAAAA,IAAI,cAAJA,GAAI,WAAJA;AAAI,CAUf,EAVWA,IAAI,KAAJA,IAAI,MAUf;;AAQD,IAAMC,eAAgC,GAAG,CACvC;EACEC,IAAI,EAAEF,IAAI,CAACG,KADb;EAEEC,GAAG,EAAE,CAAC,OAAD,CAFP;EAGEC,OAAO,EAAE;AAHX,CADuC,EAMvC;EACEH,IAAI,EAAEF,IAAI,CAACM,KADb;EAEEF,GAAG,EAAE,CAAC,OAAD,EAAU,UAAV,EAAsB,GAAtB,CAFP;EAGEC,OAAO,EAAE;AAHX,CANuC,EAWvC;EACEH,IAAI,EAAEF,IAAI,CAACO,GADb;EAEEH,GAAG,EAAE,CAAC,KAAD,CAFP;EAGEC,OAAO,EAAE;AAHX,CAXuC,EAgBvC;EACEH,IAAI,EAAEF,IAAI,CAACQ,MADb;EAEEJ,GAAG,EAAE,CAAC,QAAD,CAFP;EAGEC,OAAO,EAAE;AAHX,CAhBuC,EAqBvC;EACEH,IAAI,EAAEF,IAAI,CAACS,IADb;EAEEL,GAAG,EAAE,CAAC,MAAD,CAFP;EAGEC,OAAO,EAAE;AAHX,CArBuC,EA0BvC;EACEH,IAAI,EAAEF,IAAI,CAACU,GADb;EAEEN,GAAG,EAAE,CAAC,KAAD,CAFP;EAGEC,OAAO,EAAE;AAHX,CA1BuC,EA+BvC;EACEH,IAAI,EAAEF,IAAI,CAACW,UADb;EAEEP,GAAG,EAAE,CAAC,WAAD,CAFP;EAGEC,OAAO,EAAE;AAHX,CA/BuC,EAoCvC;EACEH,IAAI,EAAEF,IAAI,CAACY,WADb;EAEER,GAAG,EAAE,CAAC,YAAD,CAFP;EAGEC,OAAO,EAAE;AAHX,CApCuC,EAyCvC;EACEH,IAAI,EAAEF,IAAI,CAACa,UADb;EAEET,GAAG,EAAE,CAAC,WAAD,CAFP;EAGEC,OAAO,EAAE;AAHX,CAzCuC,CAAzC;AAgDA,OAAO,SAASS,UAAT,CAAoBC,CAApB,EAAyE;EAAA;;EAC9E,OACE,yCAAe,CAACC,IAAhBf,CAAqB;IAAA,IAAGG,GAAG,QAAHA,GAAH;IAAA,IAAQC,OAAO,QAAPA,OAAR;IAAe,OAAOD,GAAG,CAACa,QAAJb,CAAaW,CAAC,CAACX,GAAfA,KAAuBC,OAAO,KAAKU,CAAC,CAACV,OAA5C;EAAmD,CAAvFJ,OAAwF,IAAxF,IAAwFiB,gCAAxF,GAAwF,MAAxF,yBACIhB,IADJ,KACY,IAFd;AAIF;AAEA,OAAO,SAASiB,gCAAT,CACLJ,CADK,EAEL;EACA,IAAMK,EAAE,GAAGL,CAAC,CAACM,MAAb;EACA,IAAQC,OAAO,GAAKF,EAAE,CAAdE,OAAR;EAEA,IAAMC,IAAI,GAAGH,EAAE,CAACI,YAAHJ,CAAgB,MAAhBA,CAAb;EAEA,IAAMK,0BAAmC,GACvCL,EAAE,CAACM,iBAAHN,KAAyB,IAAzBA,IACAE,OAAO,KAAK,OADZF,IAEAE,OAAO,KAAK,UAFZF,KAGCG,IAAI,KAAK,QAATA,IAAqBA,IAAI,KAAK,MAH/BH,CADF;EAMA,IAAMO,gBAAgB,GAAGL,OAAO,KAAK,GAAZA,IAAmBF,EAAE,CAACQ,YAAHR,CAAgB,MAAhBA,CAA5C;EACA,IAAMS,UAAU,GAAGf,UAAU,CAACC,CAAD,CAA7B;EAEA,OACEU,0BAA0B,MAC1B;EACEI,UAAU,KAAK7B,IAAI,CAACM,KAApBuB,IAA6BN,IAAI,KAAK,QAAtCM,IACA;EACCA,UAAU,KAAK7B,IAAI,CAACG,KAApB0B,IAA6B,CAACF,gBAJP,CAD5B;AAOF","names":["FOCUSABLE_ELEMENTS_LIST","Keys","ACCESSIBLE_KEYS","code","ENTER","key","keyCode","SPACE","TAB","ESCAPE","HOME","END","ARROW_LEFT","ARROW_RIGHT","ARROW_DOWN","pressedKey","e","find","includes","_ACCESSIBLE_KEYS$find","shouldTriggerClickOnEnterOrSpace","el","target","tagName","role","getAttribute","isValidKeyboardEventTarget","isContentEditable","isNativeAnchorEl","hasAttribute","keyPressed"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/lib/accessibility.ts"],"sourcesContent":["import * as React from 'react';\n\nexport const FOCUSABLE_ELEMENTS_LIST = [\n  'a[href]',\n  'area[href]',\n  'input:not([disabled]):not([hidden]):not([type=\"hidden\"]):not([aria-hidden])',\n  'select:not([disabled]):not([hidden]):not([aria-hidden])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'iframe',\n  'audio',\n  'video',\n  '[contenteditable]',\n  '[tabindex]:not([tabindex=\"-1\"])',\n];\n\nexport enum Keys {\n  ENTER = 'Enter',\n  SPACE = 'Space',\n  TAB = 'Tab',\n  ESCAPE = 'Escape',\n  HOME = 'Home',\n  END = 'End',\n  ARROW_LEFT = 'ArrowLeft',\n  ARROW_RIGHT = 'ArrowRight',\n  ARROW_DOWN = 'ArrowDown',\n}\n\ninterface AccessibleKey {\n  code: Keys;\n  key: string[];\n  keyCode: number;\n}\n\nconst ACCESSIBLE_KEYS: AccessibleKey[] = [\n  {\n    code: Keys.ENTER,\n    key: ['Enter'],\n    keyCode: 13,\n  },\n  {\n    code: Keys.SPACE,\n    key: ['Space', 'Spacebar', ' '],\n    keyCode: 32,\n  },\n  {\n    code: Keys.TAB,\n    key: ['Tab'],\n    keyCode: 9,\n  },\n  {\n    code: Keys.ESCAPE,\n    key: ['Escape'],\n    keyCode: 27,\n  },\n  {\n    code: Keys.HOME,\n    key: ['Home'],\n    keyCode: 36,\n  },\n  {\n    code: Keys.END,\n    key: ['End'],\n    keyCode: 35,\n  },\n  {\n    code: Keys.ARROW_LEFT,\n    key: ['ArrowLeft'],\n    keyCode: 37,\n  },\n  {\n    code: Keys.ARROW_RIGHT,\n    key: ['ArrowRight'],\n    keyCode: 39,\n  },\n  {\n    code: Keys.ARROW_DOWN,\n    key: ['ArrowDown'],\n    keyCode: 40,\n  },\n];\n\nexport function pressedKey(e: KeyboardEvent | React.KeyboardEvent<HTMLElement>) {\n  return (\n    ACCESSIBLE_KEYS.find(({ key, keyCode }) => key.includes(e.key) || keyCode === e.keyCode)\n      ?.code || null\n  );\n}\n\nexport function shouldTriggerClickOnEnterOrSpace(\n  e: KeyboardEvent | React.KeyboardEvent<HTMLElement>,\n) {\n  const el = e.target as HTMLElement;\n  const { tagName } = el;\n\n  const role = el.getAttribute('role');\n\n  const isValidKeyboardEventTarget: boolean =\n    el.isContentEditable !== true &&\n    tagName !== 'INPUT' &&\n    tagName !== 'TEXTAREA' &&\n    (role === 'button' || role === 'link');\n\n  const isNativeAnchorEl = tagName === 'A' && el.hasAttribute('href');\n  const keyPressed = pressedKey(e);\n\n  return (\n    isValidKeyboardEventTarget &&\n    // trigger buttons on Space\n    ((keyPressed === Keys.SPACE && role === 'button') ||\n      // trigger non-native links and buttons on Enter\n      (keyPressed === Keys.ENTER && !isNativeAnchorEl))\n  );\n}\n"]},"metadata":{},"sourceType":"module"}