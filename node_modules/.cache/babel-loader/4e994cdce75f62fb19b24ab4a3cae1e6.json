{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\n\nfunction getOrientation(window) {\n  var _window$screen$orient, _window$screen, _window$screen$orient2;\n\n  if (!window) {\n    return 'portrait';\n  }\n\n  var angle = Math.abs( // eslint-disable-next-line compat/compat\n  (_window$screen$orient = (_window$screen = window.screen) === null || _window$screen === void 0 ? void 0 : (_window$screen$orient2 = _window$screen.orientation) === null || _window$screen$orient2 === void 0 ? void 0 : _window$screen$orient2.angle) !== null && _window$screen$orient !== void 0 ? _window$screen$orient : Number(window.orientation));\n  return angle === 90 ? 'landscape' : 'portrait';\n}\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\n\n\nexport function useOrientationChange() {\n  var _useDOM = useDOM(),\n      window = _useDOM.window;\n\n  var _React$useState = React.useState(function () {\n    return getOrientation(window);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      orientation = _React$useState2[0],\n      setOrientation = _React$useState2[1];\n\n  useGlobalEventListener(window, 'orientationchange', function () {\n    return setOrientation(getOrientation(window));\n  });\n  return orientation;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAIA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,MAAxB,EAAiE;EAAA;;EAC/D,IAAI,CAACA,MAAL,EAAa;IACX,OAAO,UAAP;EACF;;EAEA,IAAMC,KAAK,GAAGC,IAAI,CAACC,GAALD,EACZ;EAAA,2CACAF,MAAM,CAACI,MADP,MACa,IADb,IACaC,yBADb,GACa,MADb,GACa,0BAAbA,eAAeC,WAAF,MAAa,IAAb,IAAaC,iCAAb,GAAa,MAAb,GAAbA,uBAA4BN,KAD5B,MACiC,IADjC,IACiCO,gCADjC,GACiCA,qBADjC,GACqCC,MAAM,CAACT,MAAM,CAACM,WAAR,CAF/BJ,CAAd;EAKA,OAAOD,KAAK,KAAK,EAAVA,GAAe,WAAfA,GAA6B,UAApC;AACF;AAEA;AACA;AACA;AACA;;;AACA,OAAO,SAASS,oBAAT,GAA6C;EAClD,cAAmBb,MAAM,EAAzB;EAAA,IAAQG,MAAM,WAANA,MAAR;;EAEA,sBAAsCJ,KAAK,CAACe,QAANf,CAAe;IAAA,OAAMG,cAAc,CAACC,MAAD,CAApB;EAA4B,CAA3CJ,CAAtC;EAAA,IAAkFgB,qDAAlF;EAAA,IAAON,WAAW,sBAAlB;EAAA,IAAoBO,cAAc,sBAAlC;;EAEAf,sBAAsB,CAACE,MAAD,EAAS,mBAAT,EAA8B;IAAA,OAAMa,cAAc,CAACd,cAAc,CAACC,MAAD,CAAf,CAApB;EAA4C,CAA1E,CAAtBF;EAEA,OAAOQ,WAAP;AACF","names":["React","useDOM","useGlobalEventListener","getOrientation","window","angle","Math","abs","screen","_window$screen","orientation","_window$screen$orient2","_window$screen$orient","Number","useOrientationChange","useState","_React$useState2","setOrientation"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/hooks/useOrientationChange.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\ntype Orientation = 'portrait' | 'landscape';\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\nfunction getOrientation(window: Window | undefined): Orientation {\n  if (!window) {\n    return 'portrait';\n  }\n\n  const angle = Math.abs(\n    // eslint-disable-next-line compat/compat\n    window.screen?.orientation?.angle ?? Number(window.orientation),\n  );\n\n  return angle === 90 ? 'landscape' : 'portrait';\n}\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\nexport function useOrientationChange(): Orientation {\n  const { window } = useDOM();\n\n  const [orientation, setOrientation] = React.useState(() => getOrientation(window));\n\n  useGlobalEventListener(window, 'orientationchange', () => setOrientation(getOrientation(window)));\n\n  return orientation;\n}\n"]},"metadata":{},"sourceType":"module"}