{"ast":null,"code":"import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\n\nfunction calcStrokeDashOffset(value, radius) {\n  var progress = value / 100;\n  return 2 * Math.PI * radius * (1 - progress);\n}\n\nexport var PullToRefreshSpinner = function PullToRefreshSpinner(_ref) {\n  var _ref$on = _ref.on,\n      on = _ref$on === void 0 ? true : _ref$on,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      _ref$strokeWidth = _ref.strokeWidth,\n      strokeWidth = _ref$strokeWidth === void 0 ? 2.5 : _ref$strokeWidth,\n      style = _ref.style,\n      _ref$progress = _ref.progress,\n      progress = _ref$progress === void 0 ? 0 : _ref$progress,\n      _ref$ariaLabel = _ref['aria-label'],\n      ariaLabel = _ref$ariaLabel === void 0 ? 'Пожалуйста, подождите...' : _ref$ariaLabel;\n  var radius = 0.5 * size - 0.5 * strokeWidth;\n  var dasharray = 2 * Math.PI * radius;\n  var circleCenter = 0.5 * size;\n  var dashoffset = calcStrokeDashOffset(on ? 80 : progress, radius);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"vkuiPullToRefresh__spinner\", on && \"vkuiPullToRefresh__spinner--on\"),\n    style: style,\n    \"aria-label\": on ? ariaLabel : undefined\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    role: \"presentation\",\n    className: \"vkuiPullToRefresh__spinner-self\",\n    style: {\n      width: size,\n      height: size\n    },\n    viewBox: \"0 0 \".concat(size, \" \").concat(size),\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      width: size,\n      height: size,\n      transformOrigin: \"\".concat(circleCenter, \"px \").concat(circleCenter, \"px\")\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"vkuiPullToRefresh__spinner-path\",\n    fill: \"none\",\n    strokeDasharray: dasharray,\n    strokeDashoffset: dashoffset,\n    strokeWidth: strokeWidth,\n    strokeLinecap: \"round\",\n    cx: circleCenter,\n    cy: circleCenter,\n    r: radius\n  }))));\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B;;AAGA,SAASC,oBAAT,CAA8BC,KAA9B,EAA6CC,MAA7C,EAA6D;EAC3D,IAAMC,QAAQ,GAAGF,KAAK,GAAG,GAAzB;EACA,OAAO,IAAIG,IAAI,CAACC,EAAT,GAAcH,MAAd,IAAwB,IAAIC,QAA5B,CAAP;AACF;;AAUA,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAHC,IAAG,EAOH;EAAA,mBAN/BC,EAM+B;EAAA,IAN/BA,EAAE,wBAAG,IAAH,GAAOC,OAMsB;EAAA,IANtBC,iBACTC,IAK+B;EAAA,IAL/BA,IAAI,0BAAG,EAAH,GAAKD,SAKsB;EAAA,IALtBE,wBACTC,WAI+B;EAAA,IAJ/BA,WAAW,iCAAG,GAAH,GAAMD,gBAIc;EAAA,IAH/BE,KAAK,QAALA,KAG+B;EAAA,IAH1BC,qBACLZ,QAE+B;EAAA,IAF/BA,QAAQ,8BAAG,CAAH,GAAIY,aAEmB;EAAA,IAFnBC,sBACZ,YADY,CAEmB;EAAA,IADjBC,SAAS,+BAAG,0BAAH,GAA6BD,cACrB;EAC/B,IAAMd,MAAM,GAAG,MAAMS,IAAN,GAAa,MAAME,WAAlC;EACA,IAAMK,SAAS,GAAG,IAAId,IAAI,CAACC,EAAT,GAAcH,MAAhC;EACA,IAAMiB,YAAY,GAAG,MAAMR,IAA3B;EAEA,IAAMS,UAAU,GAAGpB,oBAAoB,CAACQ,EAAE,GAAG,EAAH,GAAQL,QAAX,EAAqBD,MAArB,CAAvC;EAEA,oBACEJ;IACEuB,SAAS,EAAEtB,UAAU,+BAEnBS,EAAE,oCAFiB,CADvB;IAKEM,KAAK,EAAEA,KALT;IAME,cAAYN,EAAE,GAAGS,SAAH,GAAeK;EAN/B,GAMyC,aAEvCxB;IACEyB,IAAI,EAAC,cADP;IAEEF,SAAS,mCAFX;IAGEP,KAAK,EAAE;MACLU,KAAK,EAAEb,IADF;MAELc,MAAM,EAAEd;IAFH,CAHT;IAOEe,OAAO,gBAASf,IAAT,EAAa,GAAb,EAAagB,MAAb,CAAiBhB,IAAjB,CAPT;IAQEiB,KAAK,EAAC;EARR,GAQoC,aAElC9B;IACEgB,KAAK,EAAE;MACLU,KAAK,EAAEb,IADF;MAELc,MAAM,EAAEd,IAFH;MAGLkB,eAAe,YAAKV,YAAL,EAAiB,KAAjB,EAAiBQ,MAAjB,CAAuBR,YAAvB,EAAmC,IAAnC;IAHV;EADT,GAKI,aAEFrB;IACEuB,SAAS,mCADX;IAEES,IAAI,EAAC,MAFP;IAGEC,eAAe,EAAEb,SAHnB;IAIEc,gBAAgB,EAAEZ,UAJpB;IAKEP,WAAW,EAAEA,WALf;IAMEoB,aAAa,EAAC,OANhB;IAOEC,EAAE,EAAEf,YAPN;IAQEgB,EAAE,EAAEhB,YARN;IASEiB,CAAC,EAAElC;EATL,EAPF,CAVF,CARF,CADF;AAyCD,CAvDM","names":["React","classNames","calcStrokeDashOffset","value","radius","progress","Math","PI","PullToRefreshSpinner","_ref","on","_ref$on","_ref$size","size","_ref$strokeWidth","strokeWidth","style","_ref$progress","_ref$ariaLabel","ariaLabel","dasharray","circleCenter","dashoffset","className","undefined","role","width","height","viewBox","concat","xmlns","transformOrigin","fill","strokeDasharray","strokeDashoffset","strokeLinecap","cx","cy","r"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/components/PullToRefresh/PullToRefreshSpinner.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport styles from './PullToRefresh.module.css';\n\nfunction calcStrokeDashOffset(value: number, radius: number) {\n  const progress = value / 100;\n  return 2 * Math.PI * radius * (1 - progress);\n}\n\nexport interface PullToRefreshSpinnerProps extends React.HTMLAttributes<HTMLDivElement> {\n  'size'?: number;\n  'strokeWidth'?: number;\n  'on'?: boolean;\n  'progress'?: number;\n  'aria-label'?: string;\n}\n\nexport const PullToRefreshSpinner = ({\n  on = true,\n  size = 24,\n  strokeWidth = 2.5,\n  style,\n  progress = 0,\n  'aria-label': ariaLabel = 'Пожалуйста, подождите...',\n}: PullToRefreshSpinnerProps) => {\n  const radius = 0.5 * size - 0.5 * strokeWidth;\n  const dasharray = 2 * Math.PI * radius;\n  const circleCenter = 0.5 * size;\n\n  const dashoffset = calcStrokeDashOffset(on ? 80 : progress, radius);\n\n  return (\n    <div\n      className={classNames(\n        styles['PullToRefresh__spinner'],\n        on && styles['PullToRefresh__spinner--on'],\n      )}\n      style={style}\n      aria-label={on ? ariaLabel : undefined}\n    >\n      <svg\n        role=\"presentation\"\n        className={styles['PullToRefresh__spinner-self']}\n        style={{\n          width: size,\n          height: size,\n        }}\n        viewBox={`0 0 ${size} ${size}`}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          style={{\n            width: size,\n            height: size,\n            transformOrigin: `${circleCenter}px ${circleCenter}px`,\n          }}\n        >\n          <circle\n            className={styles['PullToRefresh__spinner-path']}\n            fill=\"none\"\n            strokeDasharray={dasharray}\n            strokeDashoffset={dashoffset}\n            strokeWidth={strokeWidth}\n            strokeLinecap=\"round\"\n            cx={circleCenter}\n            cy={circleCenter}\n            r={radius}\n          />\n        </g>\n      </svg>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}