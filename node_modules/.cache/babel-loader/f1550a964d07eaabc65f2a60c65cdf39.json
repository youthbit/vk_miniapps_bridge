{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\n\nexport function getPreciseKeyboardState(window) {\n  var innerHeight = window.innerHeight,\n      availHeight = window.screen.availHeight;\n  var coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\nvar eventOptions = {\n  passive: true,\n  capture: false\n};\nexport function useKeyboard() {\n  var _document$activeEleme3;\n\n  var _useDOM = useDOM(),\n      document = _useDOM.document;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isOpened = _React$useState2[0],\n      setIsOpened = _React$useState2[1];\n\n  var onFocus = React.useCallback(function (event) {\n    var _document$activeEleme, _document$activeEleme2;\n\n    var isOpened = (event === true || event.type === 'focusin') && ((document === null || document === void 0 ? void 0 : (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.tagName) === 'INPUT' || (document === null || document === void 0 ? void 0 : (_document$activeEleme2 = document.activeElement) === null || _document$activeEleme2 === void 0 ? void 0 : _document$activeEleme2.tagName) === 'TEXTAREA');\n    setIsOpened(isOpened);\n  }, [document === null || document === void 0 ? void 0 : (_document$activeEleme3 = document.activeElement) === null || _document$activeEleme3 === void 0 ? void 0 : _document$activeEleme3.tagName]);\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n\n  React.useEffect(function () {\n    onFocus(true);\n  }, [onFocus]);\n  useGlobalEventListener(document, 'focusout', onFocus, eventOptions);\n  useGlobalEventListener(document, 'focusin', onFocus, eventOptions);\n  return {\n    isOpened: isOpened\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAMA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAuD;EAC5D,IACEC,WAAW,GAETD,MAAM,CAFRC,WADF;EAAA,IAEYC,WAAW,GACnBF,MAAM,CADRG,MACEH,CADQE,WAFZ;EAKA,IAAME,yBAAyB,GAAGC,IAAI,CAACC,KAALD,CAAW,CAAC,IAAIJ,WAAW,GAAGC,WAAnB,IAAkC,GAA7CG,CAAlC;EACA,OAAOD,yBAAyB,GAAG,EAAnC;AACF;AAEA,IAAMG,YAAY,GAAG;EACnBC,OAAO,EAAE,IADU;EAEnBC,OAAO,EAAE;AAFU,CAArB;AAKA,OAAO,SAASC,WAAT,GAA8C;EAAA;;EACnD,cAAqBb,MAAM,EAA3B;EAAA,IAAQc,QAAQ,WAARA,QAAR;;EAEA,sBAAgCf,KAAK,CAACgB,QAANhB,CAAe,KAAfA,CAAhC;EAAA,IAAqDiB,qDAArD;EAAA,IAAOC,QAAQ,sBAAf;EAAA,IAAiBC,WAAW,sBAA5B;;EAEA,IAAMC,OAAO,GAAGpB,KAAK,CAACqB,WAANrB,CACd,UAACsB,KAAD,EAA8B;IAAA;;IAC5B,IAAMJ,QAAQ,GACZ,CAACI,KAAK,KAAK,IAAVA,IAAkBA,KAAK,CAACC,IAAND,KAAe,SAAlC,MACC,SAAQ,SAARP,YAAQ,WAARA,GAAQ,MAARA,GAAQ,yBAARA,QAAQ,CAAES,aAAF,MAAe,IAAf,IAAeC,gCAAf,GAAe,MAAf,GAARA,sBAAyBC,OAAzB,MAAqC,OAArC,IACC,SAAQ,SAARX,YAAQ,WAARA,GAAQ,MAARA,GAAQ,0BAARA,QAAQ,CAAES,aAAF,MAAe,IAAf,IAAeG,iCAAf,GAAe,MAAf,GAARA,uBAAyBD,OAAzB,MAAqC,UAFvC,CADF;IAIAP,WAAW,CAACD,QAAD,CAAXC;EACD,CAPanB,EAQd,CAACe,QAAQ,SAARA,YAAQ,WAARA,GAAQ,MAARA,GAAQ,0BAARA,QAAQ,CAAES,aAAF,MAAe,IAAf,IAAeI,iCAAf,GAAe,MAAf,GAARA,uBAAyBF,OAA1B,CARc1B,CAAhB;EAWA;AACF;AACA;AACA;;EACEA,KAAK,CAAC6B,SAAN7B,CAAgB,YAAM;IACpBoB,OAAO,CAAC,IAAD,CAAPA;EACD,CAFDpB,EAEG,CAACoB,OAAD,CAFHpB;EAIAE,sBAAsB,CAACa,QAAD,EAAW,UAAX,EAAuBK,OAAvB,EAAgCT,YAAhC,CAAtBT;EACAA,sBAAsB,CAACa,QAAD,EAAW,SAAX,EAAsBK,OAAtB,EAA+BT,YAA/B,CAAtBT;EAEA,OAAO;IAAEgB,QAAQ,EAARA;EAAF,CAAP;AACF","names":["React","useDOM","useGlobalEventListener","getPreciseKeyboardState","window","innerHeight","availHeight","screen","coveredViewportPercentage","Math","round","eventOptions","passive","capture","useKeyboard","document","useState","_React$useState2","isOpened","setIsOpened","onFocus","useCallback","event","type","activeElement","_document$activeEleme","tagName","_document$activeEleme2","_document$activeEleme3","useEffect"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/hooks/useKeyboard.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\ninterface SoftwareKeyboardState {\n  isOpened: boolean;\n}\n\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window: any): boolean {\n  const {\n    innerHeight,\n    screen: { availHeight },\n  } = window;\n\n  const coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\n\nconst eventOptions = {\n  passive: true,\n  capture: false,\n};\n\nexport function useKeyboard(): SoftwareKeyboardState {\n  const { document } = useDOM();\n\n  const [isOpened, setIsOpened] = React.useState(false);\n\n  const onFocus = React.useCallback(\n    (event: FocusEvent | true) => {\n      const isOpened =\n        (event === true || event.type === 'focusin') &&\n        (document?.activeElement?.tagName === 'INPUT' ||\n          document?.activeElement?.tagName === 'TEXTAREA');\n      setIsOpened(isOpened);\n    },\n    [document?.activeElement?.tagName],\n  );\n\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n  React.useEffect(() => {\n    onFocus(true);\n  }, [onFocus]);\n\n  useGlobalEventListener(document, 'focusout', onFocus, eventOptions);\n  useGlobalEventListener(document, 'focusin', onFocus, eventOptions);\n\n  return { isOpened };\n}\n"]},"metadata":{},"sourceType":"module"}