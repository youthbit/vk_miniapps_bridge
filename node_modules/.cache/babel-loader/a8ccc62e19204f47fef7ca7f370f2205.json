{"ast":null,"code":"/**\n * Генерирует массив с диапазоном чисел.\n */\nexport function range(from, to) {\n  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var direction = from < to ? 1 : -1;\n  var distance = Math.abs(from - to) + 1;\n  var arrayLength = Math.ceil(distance / step);\n  var arr = Array(arrayLength);\n\n  for (var index = 0; index < arr.length; index++) {\n    arr[index] = from + index * step * direction;\n  }\n\n  return arr;\n}\n/**\n * Генерирует массив с диапазоном чисел в порядке возрастания.\n * Если `from` меньше `to`, вернется пустой массив.\n */\n\nexport function rangeIncrement(from, to) {\n  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (from > to) {\n    return [];\n  }\n\n  return range(from, to, step);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAeC,IAAf,EAA6BC,EAA7B,EAAmD;EAAA,IAAVC,IAAI,uEAAG,CAAG;EACxD,IAAMC,SAAS,GAAGH,IAAI,GAAGC,EAAPD,GAAY,CAAZA,GAAgB,CAAC,CAAnC;EACA,IAAMI,QAAQ,GAAGC,IAAI,CAACC,GAALD,CAASL,IAAI,GAAGC,EAAhBI,IAAsB,CAAvC;EACA,IAAME,WAAW,GAAGF,IAAI,CAACG,IAALH,CAAUD,QAAQ,GAAGF,IAArBG,CAApB;EAEA,IAAMI,GAAG,GAAGC,KAAK,CAASH,WAAT,CAAjB;;EACA,KAAK,IAAII,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,GAAG,CAACG,MAAhC,EAAwCD,KAAK,EAA7C,EAAiD;IAC/CF,GAAG,CAACE,KAAD,CAAHF,GAAaT,IAAI,GAAGW,KAAK,GAAGT,IAARS,GAAeR,SAAnCM;EACF;;EAEA,OAAOA,GAAP;AACF;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,cAAT,CAAwBb,IAAxB,EAAsCC,EAAtC,EAA4D;EAAA,IAAVC,IAAI,uEAAG,CAAG;;EACjE,IAAIF,IAAI,GAAGC,EAAX,EAAe;IACb,OAAO,EAAP;EACF;;EAEA,OAAOF,KAAK,CAACC,IAAD,EAAOC,EAAP,EAAWC,IAAX,CAAZ;AACF","names":["range","from","to","step","direction","distance","Math","abs","arrayLength","ceil","arr","Array","index","length","rangeIncrement"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/helpers/range.ts"],"sourcesContent":["/**\n * Генерирует массив с диапазоном чисел.\n */\nexport function range(from: number, to: number, step = 1) {\n  const direction = from < to ? 1 : -1;\n  const distance = Math.abs(from - to) + 1;\n  const arrayLength = Math.ceil(distance / step);\n\n  const arr = Array<number>(arrayLength);\n  for (let index = 0; index < arr.length; index++) {\n    arr[index] = from + index * step * direction;\n  }\n\n  return arr;\n}\n/**\n * Генерирует массив с диапазоном чисел в порядке возрастания.\n * Если `from` меньше `to`, вернется пустой массив.\n */\nexport function rangeIncrement(from: number, to: number, step = 1) {\n  if (from > to) {\n    return [];\n  }\n\n  return range(from, to, step);\n}\n"]},"metadata":{},"sourceType":"module"}