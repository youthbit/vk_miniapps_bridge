{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport var useDraggable = function useDraggable(_ref) {\n  var rootElRef = _ref.rootElRef,\n      onDragFinish = _ref.onDragFinish;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dragging = _React$useState2[0],\n      setDragging = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      siblings = _React$useState4[0],\n      setSiblings = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dragStartIndex = _React$useState6[0],\n      setDragStartIndex = _React$useState6[1];\n\n  var _React$useState7 = React.useState(0),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      dragEndIndex = _React$useState8[0],\n      setDragEndIndex = _React$useState8[1];\n\n  var _React$useState9 = React.useState(0),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      dragShift = _React$useState10[0],\n      setDragShift = _React$useState10[1];\n\n  var _React$useState11 = React.useState(undefined),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      dragDirection = _React$useState12[0],\n      setDragDirection = _React$useState12[1];\n\n  var onDragStart = function onDragStart() {\n    var _rootEl$parentElement;\n\n    var rootEl = rootElRef.current;\n\n    if (!rootEl) {\n      return;\n    }\n\n    setDragging(true);\n    var _siblings = [];\n\n    if ((_rootEl$parentElement = rootEl.parentElement) !== null && _rootEl$parentElement !== void 0 && _rootEl$parentElement.childNodes) {\n      _siblings = Array.from(rootEl.parentElement.children);\n    }\n\n    var idx = _siblings.indexOf(rootEl);\n\n    setDragStartIndex(idx);\n    setDragEndIndex(idx);\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  var onDragMove = function onDragMove(e) {\n    e.originalEvent.preventDefault();\n    var rootEl = rootElRef.current;\n\n    if (rootEl) {\n      rootEl.style.transform = \"translateY(\".concat(e.shiftY, \"px)\");\n      var rootGesture = rootEl.getBoundingClientRect();\n      setDragDirection(dragShift - e.shiftY < 0 ? 'down' : 'up');\n      setDragShift(e.shiftY);\n      setDragEndIndex(dragStartIndex);\n      siblings.forEach(function (sibling, siblingIndex) {\n        var siblingGesture = sibling.getBoundingClientRect();\n        var siblingHalfHeight = siblingGesture.height / 2;\n        var rootOverSibling = rootGesture.bottom > siblingGesture.top + siblingHalfHeight;\n        var rootUnderSibling = rootGesture.top < siblingGesture.bottom - siblingHalfHeight;\n\n        if (dragStartIndex < siblingIndex) {\n          if (rootOverSibling) {\n            if (dragDirection === 'down') {\n              sibling.style.transform = 'translateY(-100%)';\n            }\n\n            setDragEndIndex(function (dragEndIndex) {\n              return dragEndIndex + 1;\n            });\n          }\n\n          if (rootUnderSibling && dragDirection === 'up') {\n            sibling.style.transform = 'translateY(0)';\n          }\n        } else if (dragStartIndex > siblingIndex) {\n          if (rootUnderSibling) {\n            if (dragDirection === 'up') {\n              sibling.style.transform = 'translateY(100%)';\n            }\n\n            setDragEndIndex(function (dragEndIndex) {\n              return dragEndIndex - 1;\n            });\n          }\n\n          if (rootOverSibling && dragDirection === 'down') {\n            sibling.style.transform = 'translateY(0)';\n          }\n        }\n      });\n    }\n  };\n\n  var onDragEnd = function onDragEnd() {\n    var from = dragStartIndex,\n        to = dragEndIndex;\n    siblings.forEach(function (sibling) {\n      sibling.style.transform = '';\n    });\n    setSiblings([]);\n    setDragEndIndex(0);\n    setDragStartIndex(0);\n    setDragDirection(undefined);\n    setDragShift(0);\n    setDragging(false);\n    onDragFinish && onDragFinish({\n      from: from,\n      to: to\n    });\n  };\n\n  var useDraggableProps = {\n    onDragStart: onDragStart,\n    onDragMove: onDragMove,\n    onDragEnd: onDragEnd,\n    dragging: dragging\n  };\n  return useDraggableProps;\n};","map":{"version":3,"mappings":"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","names":["React","useDraggable","_ref","rootElRef","onDragFinish","useState","_React$useState2","dragging","setDragging","_React$useState4","siblings","setSiblings","_React$useState6","dragStartIndex","setDragStartIndex","_React$useState8","dragEndIndex","setDragEndIndex","_React$useState10","dragShift","setDragShift","undefined","_React$useState12","dragDirection","setDragDirection","onDragStart","rootEl","current","_siblings","parentElement","_rootEl$parentElement","childNodes","Array","from","children","idx","indexOf","onDragMove","e","originalEvent","preventDefault","style","transform","shiftY","rootGesture","getBoundingClientRect","forEach","sibling","siblingIndex","siblingGesture","siblingHalfHeight","height","rootOverSibling","bottom","top","rootUnderSibling","onDragEnd","to","useDraggableProps"],"sources":["/Users/pitus_anonimous/Desktop/youth_bit_hack/youth_bit_vk/node_modules/@vkontakte/vkui/src/components/Cell/useDraggable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TouchEvent } from '../Touch/Touch';\nimport { CellProps } from './Cell';\n\nexport interface DraggableProps {\n  onDragStart: () => void;\n  onDragEnd: () => void;\n  onDragMove: (e: TouchEvent) => void;\n}\n\ninterface UseDraggableProps extends DraggableProps {\n  dragging: boolean;\n}\n\nexport const useDraggable = <T extends HTMLElement>({\n  rootElRef,\n  onDragFinish,\n}: Pick<CellProps, 'onDragFinish'> & {\n  rootElRef: React.MutableRefObject<T | null>;\n}) => {\n  const [dragging, setDragging] = React.useState<boolean>(false);\n\n  const [siblings, setSiblings] = React.useState<HTMLElement[]>([]);\n  const [dragStartIndex, setDragStartIndex] = React.useState<number>(0);\n  const [dragEndIndex, setDragEndIndex] = React.useState<number>(0);\n  const [dragShift, setDragShift] = React.useState<number>(0);\n  const [dragDirection, setDragDirection] = React.useState<'down' | 'up' | undefined>(undefined);\n\n  const onDragStart = () => {\n    const rootEl = rootElRef.current;\n    if (!rootEl) {\n      return;\n    }\n\n    setDragging(true);\n\n    let _siblings: HTMLElement[] = [];\n    if (rootEl.parentElement?.childNodes) {\n      _siblings = Array.from(rootEl.parentElement.children) as HTMLElement[];\n    }\n    const idx = _siblings.indexOf(rootEl);\n\n    setDragStartIndex(idx);\n    setDragEndIndex(idx);\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  const onDragMove = (e: TouchEvent) => {\n    e.originalEvent.preventDefault();\n\n    const rootEl = rootElRef.current;\n\n    if (rootEl) {\n      rootEl.style.transform = `translateY(${e.shiftY}px)`;\n      const rootGesture = rootEl.getBoundingClientRect();\n\n      setDragDirection(dragShift - e.shiftY < 0 ? 'down' : 'up');\n      setDragShift(e.shiftY);\n      setDragEndIndex(dragStartIndex);\n\n      siblings.forEach((sibling: HTMLElement, siblingIndex: number) => {\n        const siblingGesture = sibling.getBoundingClientRect();\n        const siblingHalfHeight = siblingGesture.height / 2;\n\n        const rootOverSibling = rootGesture.bottom > siblingGesture.top + siblingHalfHeight;\n        const rootUnderSibling = rootGesture.top < siblingGesture.bottom - siblingHalfHeight;\n\n        if (dragStartIndex < siblingIndex) {\n          if (rootOverSibling) {\n            if (dragDirection === 'down') {\n              sibling.style.transform = 'translateY(-100%)';\n            }\n\n            setDragEndIndex((dragEndIndex) => dragEndIndex + 1);\n          }\n          if (rootUnderSibling && dragDirection === 'up') {\n            sibling.style.transform = 'translateY(0)';\n          }\n        } else if (dragStartIndex > siblingIndex) {\n          if (rootUnderSibling) {\n            if (dragDirection === 'up') {\n              sibling.style.transform = 'translateY(100%)';\n            }\n\n            setDragEndIndex((dragEndIndex) => dragEndIndex - 1);\n          }\n          if (rootOverSibling && dragDirection === 'down') {\n            sibling.style.transform = 'translateY(0)';\n          }\n        }\n      });\n    }\n  };\n\n  const onDragEnd = () => {\n    const [from, to] = [dragStartIndex, dragEndIndex];\n\n    siblings.forEach((sibling: HTMLElement) => {\n      sibling.style.transform = '';\n    });\n\n    setSiblings([]);\n    setDragEndIndex(0);\n    setDragStartIndex(0);\n    setDragDirection(undefined);\n    setDragShift(0);\n\n    setDragging(false);\n\n    onDragFinish && onDragFinish({ from, to });\n  };\n\n  const useDraggableProps: UseDraggableProps = {\n    onDragStart,\n    onDragMove,\n    onDragEnd,\n    dragging,\n  };\n\n  return useDraggableProps;\n};\n"]},"metadata":{},"sourceType":"module"}